<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Navigation</name>
    </assembly>
    <members>
        <member name="T:Navigation.ChecksumNavigationShield">
            <summary>
            Protects Urls from tampering by appending a checksum to the query string. This is a string
            generated from the other query string parameters so if one happens to change the checksum
            should no longer match
            </summary>
        </member>
        <member name="T:Navigation.NavigationShield">
            <summary>
            Provides the base functionality for Url protection mechanisms e.g. to prevent tampering or
            to obfuscate query string parameters. Regardless of the mechanism the state id parameter,
            <see cref="P:Navigation.NavigationSettings.StateIdKey"/>, is always present
            </summary>
        </member>
        <member name="M:Navigation.NavigationShield.Encode(System.Collections.Specialized.NameValueCollection,System.Boolean,Navigation.State)">
            <summary>
            Overridden by derived classes to return a protected set of query string parameters
            </summary>
            <param name="data">An unprotected set of key/value pairs prior to the formation
            of the querty string</param>
            <param name="historyPoint">Identifies if the Url is for history navigation</param>
            <param name="state">The <see cref="T:Navigation.State"/> the Url will navigate to</param>
            <returns>Protected set of query string parameters</returns>
        </member>
        <member name="M:Navigation.NavigationShield.Encode(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Overridden by derived classes to return a protected set of query string parameters
            </summary>
            <param name="data">An unprotected set of key/value pairs prior to the formation
            of the querty string</param>
            <param name="historyPoint">Identifies if the Url is for history navigation</param>
            <returns>Protected set of query string parameters</returns>
        </member>
        <member name="M:Navigation.NavigationShield.Decode(System.Collections.Specialized.NameValueCollection,System.Boolean,Navigation.State)">
            <summary>
            Overridden by derived classes to return an unprotected set of query string parameters
            </summary>
            <param name="data">A protected set of key/value pairs produced by the Encode method</param>
            <param name="historyPoint">Identifies if the Url is being decoded as a result of
            a call to <see cref="M:Navigation.StateController.NavigateHistory(System.Collections.Specialized.NameValueCollection)"/></param>
            <param name="state">The <see cref="T:Navigation.State"/> the Url has navigated to</param>
            <returns>Unprotected set of query string parameters</returns>
        </member>
        <member name="M:Navigation.NavigationShield.Decode(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Overridden by derived classes to return an unprotected set of query string parameters
            </summary>
            <param name="data">A protected set of key/value pairs produced by the Encode method</param>
            <param name="historyPoint">Identifies if the Url is being decoded as a result of
            a call to <see cref="M:Navigation.StateController.NavigateHistory(System.Collections.Specialized.NameValueCollection)"/></param>
            <returns>Unprotected set of query string parameters</returns>
        </member>
        <member name="M:Navigation.ChecksumNavigationShield.Encode(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Uses all the <paramref name="data"/> to generate a checksum and returns this data together
            with this checksum
            </summary>
            <param name="data">An unprotected set of key/value pairs prior to the formation
            of the querty string</param>
            <param name="historyPoint">Ignored parameter as <see cref="T:Navigation.ChecksumNavigationShield"/>
            encodes all navigation and history points</param>
            <returns>All query string parameters passed in <paramref name="data"/> together with
            generated checksum</returns>
        </member>
        <member name="M:Navigation.ChecksumNavigationShield.Decode(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Uses the <paramref name="data"/> to check the query string has not been tampered with
            </summary>
            <param name="data">Data generated by the <see cref="M:Navigation.ChecksumNavigationShield.Encode(System.Collections.Specialized.NameValueCollection,System.Boolean)"/> method</param>
            <param name="historyPoint">Ignored parameter as <see cref="T:Navigation.ChecksumNavigationShield"/>
            encodes all navigation and history points</param>
            <returns>All query string parameters passed in <paramref name="data"/> minus the
            generated checksum</returns>
            <exception cref="T:Navigation.UrlException">Any <paramref name="data"/> key is null; or the checksum
            does not tally</exception>
        </member>
        <member name="P:Navigation.ChecksumNavigationShield.ChecksumKey">
            <summary>
            Gets or sets the key that identifies the CheckSum
            </summary>
        </member>
        <member name="P:Navigation.ChecksumNavigationShield.Key">
            <summary>
            Gets or sets key used in the checksum generation routine, should be kept secret to prevent
            Url vulnerability
            </summary>
        </member>
        <member name="P:Navigation.ChecksumNavigationShield.Length">
            <summary>
            Gets of sets length of the generated checksum, the default value is 8
            </summary>
        </member>
        <member name="T:Navigation.FluentDialog">
            <summary>
            Configures <see cref="T:Navigation.Dialog"/> information. Represents a logical grouping of child
            <see cref="T:Navigation.FluentState"/> elements
            </summary>
        </member>
        <member name="M:Navigation.FluentDialog.#ctor(System.String,System.Collections.Generic.IEnumerable{Navigation.FluentState},Navigation.FluentState)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.FluentDialog"/> class
            </summary>
            <param name="key">The unique dialog key</param>
            <param name="states">The <see cref="T:Navigation.FluentState"/> children</param>
            <param name="initial">The state to navigate to</param>
        </member>
        <member name="M:Navigation.FluentDialog.AddAttribute(System.String,System.String)">
            <summary>
            Adds a <see cref="T:Navigation.Dialog"/> attribute
            </summary>
            <param name="key">The attribute key</param>
            <param name="value">The attribute value</param>
        </member>
        <member name="T:Navigation.FluentDialog`2">
            <summary>
            Configures <see cref="M:Navigation.FluentDialog`2.Dialog``2(System.String,``0,System.Func{``0,``1})"/> information. Represents a logical grouping of child
            <see cref="T:Navigation.FluentState"/> elements
            </summary>
            <typeparam name="TStates">Type holding the <see cref="T:Navigation.FluentState"/> children</typeparam>
            <typeparam name="TInitial">Selects the state to navigate to</typeparam>
        </member>
        <member name="M:Navigation.FluentDialog`2.Transition(System.String,System.Func{`0,Navigation.FluentState},System.Func{`0,Navigation.FluentState})">
            <summary>
            Configures <see cref="M:Navigation.FluentDialog`2.Transition(System.String,System.Func{`0,Navigation.FluentState},System.Func{`0,Navigation.FluentState})"/> information. A child of a <see cref="T:Navigation.State"/> element it represents
            a possible navigation from its parent <see cref="T:Navigation.FluentState"/> to a sibling <see cref="T:Navigation.FluentState"/>
            </summary>
            <param name="key">The unique transition key</param>
            <param name="from">Selects the from <see cref="T:Navigation.FluentState"/></param>
            <param name="to">Selects the to <see cref="T:Navigation.FluentState"/></param>
            <returns>The <see cref="T:Navigation.FluentDialog"/></returns>
        </member>
        <member name="M:Navigation.FluentDialog`2.Dialog``2(System.String,``0,System.Func{``0,``1})">
            <summary>
            Configures <see cref="M:Navigation.FluentDialog`2.Dialog``2(System.String,``0,System.Func{``0,``1})"/> information and represents a logical grouping of 
            child <see cref="T:Navigation.FluentState"/> elements
            </summary>
            <typeparam name="UStates">Type holding the <see cref="T:Navigation.FluentState"/> children</typeparam>
            <typeparam name="UInitial">Selects the state to navigate to</typeparam>
            <param name="key">The unique dialog key</param>
            <param name="states">The <see cref="T:Navigation.FluentState"/> children</param>
            <param name="initial">The state to navigate to</param>
            <returns><see cref="T:Navigation.FluentDialog"/> holding <see cref="M:Navigation.FluentDialog`2.Dialog``2(System.String,``0,System.Func{``0,``1})"/> information</returns>
        </member>
        <member name="M:Navigation.FluentDialog`2.Build">
            Builds the <see cref="T:Navigation.Dialog"/>, <see cref="T:Navigation.State"/>
            and <see cref="T:Navigation.Transition"/> configuration
        </member>
        <member name="T:Navigation.FluentExtensions">
            <summary>
            Represents support for fluently building <see cref="T:Navigation.Dialog"/>, <see cref="T:Navigation.State"/>
            and <see cref="T:Navigation.Transition"/> configuration
            </summary>
        </member>
        <member name="M:Navigation.FluentExtensions.Title``2(Navigation.FluentDialog{``0,``1},System.String)">
            <summary>
            Sets the textual description of the <see cref="T:Navigation.Dialog"/>
            </summary>
            <typeparam name="TStates">Type holding the <see cref="T:Navigation.FluentState"/> children</typeparam>
            <typeparam name="TInitial">Selects the state to navigate to</typeparam>
            <param name="dialog">The <see cref="T:Navigation.FluentDialog"/></param>
            <param name="title">The textual description</param>
            <returns>The <see cref="T:Navigation.FluentDialog"/></returns>
        </member>
        <member name="M:Navigation.FluentExtensions.Title``2(Navigation.FluentDialog{``0,``1},System.Func{System.String})">
            <summary>
            Sets the textual description of the <see cref="T:Navigation.Dialog"/>
            </summary>
            <typeparam name="TStates">Type holding the <see cref="T:Navigation.FluentState"/> children</typeparam>
            <typeparam name="TInitial">Selects the state to navigate to</typeparam>
            <param name="dialog">The <see cref="T:Navigation.FluentDialog"/></param>
            <param name="title">Returns the textual description</param>
            <returns>The <see cref="T:Navigation.FluentDialog"/></returns>
        </member>
        <member name="M:Navigation.FluentExtensions.Attributes``2(Navigation.FluentDialog{``0,``1},System.Object)">
            <summary>
            Adds <see cref="T:Navigation.Dialog"/> attributes
            </summary>
            <typeparam name="TStates">Type holding the <see cref="T:Navigation.FluentState"/> children</typeparam>
            <typeparam name="TInitial">Selects the state to navigate to</typeparam>
            <param name="dialog">The <see cref="T:Navigation.FluentDialog"/></param>
            <param name="attributes">The attributes</param>
            <returns>The <see cref="T:Navigation.FluentDialog"/></returns>
        </member>
        <member name="M:Navigation.FluentExtensions.Title``1(``0,System.String)">
            <summary>
            Sets the textual description of the <see cref="T:Navigation.State"/>
            </summary>
            <typeparam name="K">The type of the <see cref="T:Navigation.FluentState"/></typeparam>
            <param name="state">The <see cref="T:Navigation.FluentState"/></param>
            <param name="title">The textual description</param>
            <returns>The <see cref="T:Navigation.FluentState"/></returns>
        </member>
        <member name="M:Navigation.FluentExtensions.Title``1(``0,System.Func{System.String})">
            <summary>
            Sets the textual description of the <see cref="T:Navigation.State"/>
            </summary>
            <typeparam name="K">The type of the <see cref="T:Navigation.FluentState"/></typeparam>
            <param name="state">The <see cref="T:Navigation.FluentState"/></param>
            <param name="title">Returns the textual description</param>
            <returns>The <see cref="T:Navigation.FluentState"/></returns>
        </member>
        <member name="M:Navigation.FluentExtensions.Defaults``1(``0,System.Object)">
            <summary>
            Sets the default <see cref="T:Navigation.NavigationData"/>
            </summary>
            <typeparam name="K">The type of the <see cref="T:Navigation.FluentState"/></typeparam>
            <param name="state">The <see cref="T:Navigation.FluentState"/></param>
            <param name="defaults">The default <see cref="T:Navigation.NavigationData"/></param>
            <returns>The <see cref="T:Navigation.FluentState"/></returns>
        </member>
        <member name="M:Navigation.FluentExtensions.Derived``1(``0,System.String[])">
            <summary>
            Sets the derived <see cref="T:Navigation.NavigationData"/>
            </summary>
            <typeparam name="K">The type of the <see cref="T:Navigation.FluentState"/></typeparam>
            <param name="state">The <see cref="T:Navigation.FluentState"/></param>
            <param name="derived">The derived <see cref="T:Navigation.NavigationData"/></param>
            <returns>The <see cref="T:Navigation.FluentState"/></returns>
        </member>
        <member name="M:Navigation.FluentExtensions.TrackCrumbTrail``1(``0,System.Boolean)">
            <summary>
            Sets a value that indicates whether to maintain crumb trail information 
            </summary>
            <typeparam name="K">The type of the <see cref="T:Navigation.FluentState"/></typeparam>
            <param name="state">The <see cref="T:Navigation.FluentState"/></param>
            <param name="trackCrumbTrail">Maintain crumb trail indicator</param>
            <returns>The <see cref="T:Navigation.FluentState"/></returns>
        </member>
        <member name="M:Navigation.FluentExtensions.Attributes``1(``0,System.Object)">
            <summary>
            Adds <see cref="T:Navigation.State"/> attributes
            </summary>
            <typeparam name="K">The type of the <see cref="T:Navigation.FluentState"/></typeparam>
            <param name="state">The <see cref="T:Navigation.FluentState"/></param>
            <param name="attributes">The attributes</param>
            <returns>The <see cref="T:Navigation.FluentState"/></returns>
        </member>
        <member name="M:Navigation.FluentExtensions.CheckPhysicalUrlAccess``1(``0,System.Boolean)">
            <summary>
            Sets a value that indicates whether ASP.NET should validate that the user has authority to access the 
            physical page
            </summary>
            <typeparam name="K">The type of the <see cref="T:Navigation.FluentState"/></typeparam>
            <param name="state">The <see cref="T:Navigation.FluentState"/></param>
            <param name="check">Authority validation indicator</param>
            <returns>The <see cref="T:Navigation.FluentState"/></returns>
        </member>
        <member name="T:Navigation.FluentState">
            <summary>
            Configures <see cref="T:Navigation.State"/> information. A child of a <see cref="T:Navigation.FluentDialog"/> element
            </summary>
        </member>
        <member name="M:Navigation.FluentState.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.FluentState"/> class
            </summary>
            <param name="route">The route Url pattern</param>
        </member>
        <member name="M:Navigation.FluentState.AddAttribute(System.String,System.String)">
            <summary>
            Adds a <see cref="T:Navigation.State"/> attribute
            </summary>
            <param name="key">The attribute key</param>
            <param name="value">The attribute value</param>
        </member>
        <member name="T:Navigation.FluentStateInfo">
            <summary>
            Fluently builds the <see cref="T:Navigation.Dialog"/>, <see cref="T:Navigation.State"/>
            and <see cref="T:Navigation.Transition"/> configuration
            </summary>
        </member>
        <member name="M:Navigation.FluentStateInfo.Dialog``2(System.String,``0,System.Func{``0,``1})">
            <summary>
            Configures <see cref="M:Navigation.FluentStateInfo.Dialog``2(System.String,``0,System.Func{``0,``1})"/> information and represents a logical grouping of 
            child <see cref="T:Navigation.FluentState"/> elements
            </summary>
            <typeparam name="TStates">Type holding the <see cref="T:Navigation.FluentState"/> children</typeparam>
            <typeparam name="TInitial">Selects the state to navigate to</typeparam>
            <param name="key">The unique dialog key</param>
            <param name="states">The <see cref="T:Navigation.FluentState"/> children</param>
            <param name="initial">The state to navigate to</param>
            <returns><see cref="T:Navigation.FluentDialog"/> holding <see cref="M:Navigation.FluentStateInfo.Dialog``2(System.String,``0,System.Func{``0,``1})"/> information</returns>
        </member>
        <member name="M:Navigation.FluentStateInfo.Build">
            <summary>
            Builds the <see cref="T:Navigation.Dialog"/>, <see cref="T:Navigation.State"/>
            and <see cref="T:Navigation.Transition"/> configuration
            </summary>
        </member>
        <member name="T:Navigation.MvcState">
            <summary>
            Configures Mvc <see cref="T:Navigation.State"/> information. A child of a <see cref="T:Navigation.FluentDialog"/> element
            </summary>
        </member>
        <member name="M:Navigation.MvcState.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.MvcState"/> class
            </summary>
            <param name="route">The route Url pattern</param>
            <param name="controller">The name of the controller</param>
            <param name="action">The name of the action</param>
        </member>
        <member name="M:Navigation.MvcState.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.MvcState"/> class
            </summary>
            <param name="route">The route Url pattern</param>
            <param name="controller">The name of the controller</param>
            <param name="action">The name of the action</param>
            <param name="area">The name of the area</param>
        </member>
        <member name="T:Navigation.NavigationForm">
            <summary>
            Represents an HTML navigation form element
            </summary>
        </member>
        <member name="M:Navigation.NavigationForm.#ctor(System.Web.Mvc.ViewContext,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.NavigationForm"/> class
            </summary>
            <param name="viewContext">Object encapsulating view rendering information</param>
            <param name="writer">The text writer the HTML is written to</param>
        </member>
        <member name="M:Navigation.NavigationForm.Dispose(System.Boolean)">
            <summary>
            Finishes rendering of the navigation form element
            </summary>
            <param name="disposing">Finishes rendering if true</param>
        </member>
        <member name="T:Navigation.RefreshAjaxModule">
            <summary>
            Converts 302 redirects during refresh ajax navigation into 200s
            so the redirection can happen on the client
            </summary>
        </member>
        <member name="M:Navigation.RefreshAjaxModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes request handlers
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that 
            provides access to the methods, properties and events common to all 
            application objects within an ASP.NET application</param>
        </member>
        <member name="M:Navigation.RefreshAjaxModule.Dispose">
            <summary>
            Disposes of any resources
            </summary>
        </member>
        <member name="T:Navigation.RefreshLink">
            <summary>
            Represents an HTML refresh navigation anchor element
            </summary>
        </member>
        <member name="M:Navigation.RefreshLink.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.RefreshLink"/> class
            </summary>
            <param name="writer">The text writer the HTML is written to</param>
        </member>
        <member name="M:Navigation.RefreshLink.Dispose">
            <summary>
            Finishes rendering of the refresh navigation anchor element
            </summary>
        </member>
        <member name="M:Navigation.RefreshLink.Dispose(System.Boolean)">
            <summary>
            Finishes rendering of the refresh navigation anchor element
            </summary>
            <param name="disposing">Finishes rendering if true</param>
        </member>
        <member name="T:Navigation.WebApiState">
            <summary>
            Configures Web Api <see cref="T:Navigation.State"/> information. A child of a <see cref="T:Navigation.FluentDialog"/> element
            </summary>
        </member>
        <member name="M:Navigation.WebApiState.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.WebApiState"/> class
            </summary>
            <param name="route">The route Url pattern</param>
            <param name="controller">The name of the controller</param>
            <param name="action">The name of the action</param>
        </member>
        <member name="T:Navigation.WebFormsState">
            <summary>
            Configures Web Forms <see cref="T:Navigation.State"/> information. A child of a <see cref="T:Navigation.FluentDialog"/> element
            </summary>
        </member>
        <member name="M:Navigation.WebFormsState.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.WebFormsState"/> class
            </summary>
            <param name="route">The route Url pattern</param>
            <param name="page">The aspx page</param>
        </member>
        <member name="T:Navigation.ConverterInfoSectionHandler">
            <summary>
            Provides access to the Navigation/NavigationData section and is not intended to be used outside
            of the Navigation framework
            </summary>
        </member>
        <member name="T:Navigation.Crumb">
            <summary>
            Represents one piece of the crumb trail and holds the information need to return to and recreate 
            the <see cref="T:Navigation.State"/> as previously visited. In a single crumb trail no two crumbs
            can have the same <see cref="P:Navigation.Crumb.State"/> but all must have the same <see cref="T:Navigation.Dialog"/>
            </summary>
        </member>
        <member name="P:Navigation.Crumb.NavigationLink">
            <summary>
            Gets the hyperlink navigation to return to the <see cref="P:Navigation.Crumb.State"/> and pass
            the associated <see cref="P:Navigation.Crumb.Data"/>
            </summary>
        </member>
        <member name="P:Navigation.Crumb.Data">
            <summary>
            Gets the <see cref="P:Navigation.StateContext.Data">Context Data</see> held at the time of navigating
            away from this <see cref="P:Navigation.Crumb.State"/>
            </summary>
        </member>
        <member name="P:Navigation.Crumb.Bag">
            <summary>
            Gets the dynamic <see cref="P:Navigation.NavigationData.Bag"/> for the <see cref="P:Navigation.Crumb.Data"/>
            </summary>
        </member>
        <member name="P:Navigation.Crumb.Item(System.String)">
            <summary>
            Gets values from <see cref="P:Navigation.Crumb.Data"/> for the specified <paramref name="key"/>.
            A convenience property used in conjunction with <see cref="T:Navigation.CrumbTrailDataSource"/> 
            when data binding
            </summary>
            <param name="key">Key to the <see cref="T:Navigation.NavigationData"/> item</param>
            <returns>Value of the <see cref="T:Navigation.NavigationData"/> item</returns>
        </member>
        <member name="P:Navigation.Crumb.State">
            <summary>
            Gets the configuration information associated with this navigation
            </summary>
        </member>
        <member name="P:Navigation.Crumb.Title">
            <summary>
            Gets the <see cref="P:Navigation.Crumb.State"/> Title. A convenience property  used in conjunction
            with <see cref="T:Navigation.CrumbTrailDataSource"/> when data binding
            </summary>
        </member>
        <member name="P:Navigation.Crumb.Last">
            <summary>
            Gets a value indicating whether the <see cref="T:Navigation.Crumb"/> is the last in the crumb trail
            </summary>
        </member>
        <member name="T:Navigation.AjaxExtensions">
            <summary>
            Represents support for AJAX in a navigation application
            </summary>
        </member>
        <member name="M:Navigation.AjaxExtensions.RefreshPanel(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Func{System.Object,System.Web.WebPages.HelperResult})">
            <summary>
            Returns a span element containing the specified <paramref name="content"/>
            </summary>
            <param name="ajaxHelper">The AJAX helper instance that this method extends</param>
            <param name="id">The span element id</param>
            <param name="navigationDataKeys">Comma separated list of <see cref="T:Navigation.NavigationData"/>
            items that trigger the panel to refresh</param>
            <param name="content">Html content</param>
            <returns>A span container element</returns>
        </member>
        <member name="M:Navigation.AjaxExtensions.RefreshPanel(System.Web.Mvc.AjaxHelper,System.String,System.Func{System.Web.HttpContextBase,Navigation.NavigationData,Navigation.NavigationData,System.Boolean},System.Func{System.Object,System.Web.WebPages.HelperResult})">
            <summary>
            Returns a span element containing the specified <paramref name="content"/>
            </summary>
            <param name="ajaxHelper">The AJAX helper instance that this method extends</param>
            <param name="id">The span element id</param>
            <param name="changed">A function that triggers the panel to refresh</param>
            <param name="content">Html content</param>
            <returns>A span container element</returns>
        </member>
        <member name="T:Navigation.FormExtensions">
            <summary>
            Represents support for HTML in a navigation application
            </summary>
        </member>
        <member name="M:Navigation.FormExtensions.BeginNavigationForm(System.Web.Mvc.HtmlHelper,System.String,System.IO.TextWriter,System.Object)">
            <summary>
            Writes an opening &lt;form&gt; tag to the response with its action attribute set from
            a call to <see cref="M:Navigation.StateController.GetNavigationLink(System.String,Navigation.NavigationData)"/>
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="action">The key of a child <see cref="T:Navigation.Transition"/> or the key of a 
            <see cref="T:Navigation.Dialog"/></param>
            <param name="writer">The text writer the HTML is written to</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An opening &lt;form&gt; tag</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="action"/> does not match the key of 
            a child <see cref="T:Navigation.Transition"/> or the key of a <see cref="T:Navigation.Dialog"/>; or there is 
            <see cref="T:Navigation.NavigationData"/> that cannot be converted to a <see cref="T:System.String"/></exception>
        </member>
        <member name="M:Navigation.FormExtensions.BeginNavigationForm(System.Web.Mvc.HtmlHelper,System.String,Navigation.NavigationData,System.IO.TextWriter,System.Object)">
            <summary>
            Writes an opening &lt;form&gt; tag to the response with its action attribute set from
            a call to <see cref="M:Navigation.StateController.GetNavigationLink(System.String,Navigation.NavigationData)"/>
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="action">The key of a child <see cref="T:Navigation.Transition"/> or the key of a 
            <see cref="T:Navigation.Dialog"/></param>
            <param name="toData">The <see cref="T:Navigation.NavigationData"/> to be passed to the next
            <see cref="T:Navigation.State"/> and stored in the <see cref="T:Navigation.StateContext"/></param>
            <param name="writer">The text writer the HTML is written to</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An opening &lt;form&gt; tag</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="action"/> does not match the key of 
            a child <see cref="T:Navigation.Transition"/> or the key of a <see cref="T:Navigation.Dialog"/>; or there is 
            <see cref="T:Navigation.NavigationData"/> that cannot be converted to a <see cref="T:System.String"/></exception>
        </member>
        <member name="M:Navigation.FormExtensions.BeginNavigationBackForm(System.Web.Mvc.HtmlHelper,System.Int32,System.IO.TextWriter,System.Object)">
            <summary>
            Writes an opening &lt;form&gt; tag to the response with its action attribute set from
            a call to <see cref="M:Navigation.StateController.GetNavigationBackLink(System.Int32)"/>
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="distance">Starting at 1, the number of <see cref="T:Navigation.Crumb"/> steps to go back</param>
            <param name="writer">The text writer the HTML is written to</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An opening &lt;form&gt; tag</returns>
            <exception cref="T:System.ArgumentException"><see cref="M:Navigation.StateController.CanNavigateBack(System.Int32)"/> returns
            false for this <paramref name="distance"/></exception>
        </member>
        <member name="M:Navigation.FormExtensions.BeginRefreshForm(System.Web.Mvc.HtmlHelper,System.IO.TextWriter,System.Object)">
            <summary>
            Writes an opening &lt;form&gt; tag to the response with its action attribute set from
            a call to <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/>
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="writer">The text writer the HTML is written to</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An opening &lt;form&gt; tag</returns>
        </member>
        <member name="M:Navigation.FormExtensions.BeginRefreshForm(System.Web.Mvc.HtmlHelper,Navigation.NavigationData,System.Boolean,System.IO.TextWriter,System.Object)">
            <summary>
            Writes an opening &lt;form&gt; tag to the response with its action attribute set from
            a call to <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/>
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="toData">The <see cref="T:Navigation.NavigationData"/> to be passed to the current
            <see cref="T:Navigation.State"/> and stored in the <see cref="T:Navigation.StateContext"/></param>
            <param name="includeCurrentData">Indicates whether to include the current data together
            with the <paramref name="toData"/></param>
            <param name="writer">The text writer the HTML is written to</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An opening &lt;form&gt; tag</returns>
            <exception cref="T:System.ArgumentException">There is <see cref="T:Navigation.NavigationData"/> that cannot be
            converted to a <see cref="T:System.String"/></exception>
        </member>
        <member name="M:Navigation.FormExtensions.BeginRefreshForm(System.Web.Mvc.HtmlHelper,Navigation.NavigationData,System.String,System.IO.TextWriter,System.Object)">
            <summary>
            Writes an opening &lt;form&gt; tag to the response with its action attribute set from
            a call to <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/>
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="toData">The <see cref="T:Navigation.NavigationData"/> to be passed to the current
            <see cref="T:Navigation.State"/> and stored in the <see cref="T:Navigation.StateContext"/></param>
            <param name="currentDataKeys">A comma separated list of current data items to
            include together with the <paramref name="toData"/></param>
            <param name="writer">The text writer the HTML is written to</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An opening &lt;form&gt; tag</returns>
            <exception cref="T:System.ArgumentException">There is <see cref="T:Navigation.NavigationData"/> that cannot be
            converted to a <see cref="T:System.String"/></exception>
        </member>
        <member name="T:Navigation.LinkExtensions">
            <summary>
            Represents support for HTML in a navigation application
            </summary>
        </member>
        <member name="M:Navigation.LinkExtensions.NavigationLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Returns an anchor element (a element) with its href attribute set from a call to
            <see cref="M:Navigation.StateController.GetNavigationLink(System.String,Navigation.NavigationData)"/>
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="linkText">The inner text of the anchor element</param>
            <param name="action">The key of a child <see cref="T:Navigation.Transition"/> or the key of a 
            <see cref="T:Navigation.Dialog"/></param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An anchor element (a element)</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="linkText"/> is null or empty;
            <paramref name="action"/> does not match the key of a child <see cref="T:Navigation.Transition"/> or 
            the key of a <see cref="T:Navigation.Dialog"/>; or there is <see cref="T:Navigation.NavigationData"/> that cannot 
            be converted to a <see cref="T:System.String"/></exception>
        </member>
        <member name="M:Navigation.LinkExtensions.NavigationLink(System.Web.Mvc.HtmlHelper,System.String,System.String,Navigation.NavigationData,System.Object)">
            <summary>
            Returns an anchor element (a element) with its href attribute set from a call to
            <see cref="M:Navigation.StateController.GetNavigationLink(System.String,Navigation.NavigationData)"/>
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="linkText">The inner text of the anchor element</param>
            <param name="action">The key of a child <see cref="T:Navigation.Transition"/> or the key of a 
            <see cref="T:Navigation.Dialog"/></param>
            <param name="toData">The <see cref="T:Navigation.NavigationData"/> to be passed to the next
            <see cref="T:Navigation.State"/> and stored in the <see cref="T:Navigation.StateContext"/></param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An anchor element (a element)</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="linkText"/> is null or empty;
            <paramref name="action"/> does not match the key of a child <see cref="T:Navigation.Transition"/> or 
            the key of a <see cref="T:Navigation.Dialog"/>; or there is <see cref="T:Navigation.NavigationData"/> that cannot 
            be converted to a <see cref="T:System.String"/></exception>
        </member>
        <member name="M:Navigation.LinkExtensions.NavigationBackLink(System.Web.Mvc.HtmlHelper,System.String,System.Int32,System.Object)">
            <summary>
            Returns an anchor element (a element) with its href attribute set from a call to
            <see cref="M:Navigation.StateController.GetNavigationBackLink(System.Int32)"/>
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="linkText">The inner text of the anchor element</param>
            <param name="distance">Starting at 1, the number of <see cref="T:Navigation.Crumb"/> steps to go back</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An anchor element (a element)</returns>
            <exception cref="T:System.ArgumentException"><paramref name="linkText"/> is null or empty; or
            <see cref="M:Navigation.StateController.CanNavigateBack(System.Int32)"/> returns false for this <paramref name="distance"/></exception>
        </member>
        <member name="M:Navigation.LinkExtensions.RefreshLink(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
            <summary>
            Returns an anchor element (a element) with its href attribute set from a call to
            <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/>
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="linkText">The inner text of the anchor element</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An anchor element (a element)</returns>
            <exception cref="T:System.ArgumentException"><paramref name="linkText"/> is null or empty</exception>
        </member>
        <member name="M:Navigation.LinkExtensions.RefreshLink(System.Web.Mvc.HtmlHelper,System.String,Navigation.NavigationData,System.Boolean,System.Object)">
            <summary>
            Returns an anchor element (a element) with its href attribute set from a call to
            <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/>
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="linkText">The inner text of the anchor element</param>
            <param name="toData">The <see cref="T:Navigation.NavigationData"/> to be passed to the current
            <see cref="T:Navigation.State"/> and stored in the <see cref="T:Navigation.StateContext"/></param>
            <param name="includeCurrentData">Indicates whether to include the current data together
            with the <paramref name="toData"/></param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An anchor element (a element)</returns>
            <exception cref="T:System.ArgumentException"><paramref name="linkText"/> is null or empty; or
            there is <see cref="T:Navigation.NavigationData"/> that cannot be converted to a <see cref="T:System.String"/></exception>
        </member>
        <member name="M:Navigation.LinkExtensions.RefreshLink(System.Web.Mvc.HtmlHelper,System.String,Navigation.NavigationData,System.String,System.Object)">
            <summary>
            Returns an anchor element (a element) with its href attribute set from a call to
            <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/>
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="linkText">The inner text of the anchor element</param>
            <param name="toData">The <see cref="T:Navigation.NavigationData"/> to be passed to the current
            <see cref="T:Navigation.State"/> and stored in the <see cref="T:Navigation.StateContext"/></param>
            <param name="currentDataKeys">A comma separated list of current data items to
            include together with the <paramref name="toData"/></param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An anchor element (a element)</returns>
            <exception cref="T:System.ArgumentException"><paramref name="linkText"/> is null or empty; or
            there is <see cref="T:Navigation.NavigationData"/> that cannot be converted to a <see cref="T:System.String"/></exception>
        </member>
        <member name="M:Navigation.LinkExtensions.BeginRefreshLink(System.Web.Mvc.HtmlHelper,System.IO.TextWriter,System.Object)">
            <summary>
            Returns an anchor element (a element) with its href attribute set from a call to
            <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/>
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="writer">The text writer the HTML is written to</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An anchor element (a element)</returns>
        </member>
        <member name="M:Navigation.LinkExtensions.BeginRefreshLink(System.Web.Mvc.HtmlHelper,Navigation.NavigationData,System.Boolean,System.IO.TextWriter,System.Object)">
            <summary>
            Returns an anchor element (a element) with its href attribute set from a call to
            <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/>
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="toData">The <see cref="T:Navigation.NavigationData"/> to be passed to the current
            <see cref="T:Navigation.State"/> and stored in the <see cref="T:Navigation.StateContext"/></param>
            <param name="includeCurrentData">Indicates whether to include the current data together
            with the <paramref name="toData"/></param>
            <param name="writer">The text writer the HTML is written to</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An anchor element (a element)</returns>
        </member>
        <member name="M:Navigation.LinkExtensions.BeginRefreshLink(System.Web.Mvc.HtmlHelper,Navigation.NavigationData,System.String,System.IO.TextWriter,System.Object)">
            <summary>
            Returns an anchor element (a element) with its href attribute set from a call to
            <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/>
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="toData">The <see cref="T:Navigation.NavigationData"/> to be passed to the current
            <see cref="T:Navigation.State"/> and stored in the <see cref="T:Navigation.StateContext"/></param>
            <param name="currentDataKeys">A comma separated list of current data items to
            include together with the <paramref name="toData"/></param>
            <param name="writer">The text writer the HTML is written to</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An anchor element (a element)</returns>
        </member>
        <member name="T:Navigation.MvcStateHandler">
            <summary>
            Implementation of <see cref="T:Navigation.IStateHandler"/> that builds and parses
            navigation links for an MVC <see cref="T:Navigation.State"/>
            </summary>
        </member>
        <member name="T:Navigation.StateHandler">
            <summary>
            Implementation of <see cref="T:Navigation.IStateHandler"/> that builds and parses
            navigation links for a routed <see cref="T:Navigation.State"/>
            </summary>
        </member>
        <member name="T:Navigation.IStateHandler">
            <summary>
            Defines a contract a class must implement in order to build and parse navigation links
            </summary>
        </member>
        <member name="M:Navigation.IStateHandler.GetNavigationLink(Navigation.State,System.Collections.Specialized.NameValueCollection,System.Web.HttpContextBase)">
            <summary>
            Gets a link that navigates to the <paramref name="state"/> passing the <paramref name="data"/>
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> to navigate to</param>
            <param name="data">The data to pass when navigating</param>
            <param name="context">The current context</param>
            <returns>The navigation link</returns>
        </member>
        <member name="M:Navigation.IStateHandler.GetNavigationData(Navigation.State,System.Web.HttpContextBase)">
            <summary>
            Gets the data parsed from the <paramref name="context"/>
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> navigated to</param>
            <param name="context">The current context</param>
            <returns>The navigation data</returns>
        </member>
        <member name="M:Navigation.IStateHandler.NavigateLink(Navigation.State,System.String,Navigation.NavigationMode,System.Web.HttpContextBase)">
            <summary>
            Navigates to the <paramref name="url"/> depending on the <paramref name="mode"/> specified
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> to navigate to</param>
            <param name="url">The target location</param>
            <param name="mode">The navigation mode</param>
            <param name="context">The current context</param>
        </member>
        <member name="M:Navigation.StateHandler.GetNavigationLink(Navigation.State,System.Collections.Specialized.NameValueCollection,System.Web.HttpContextBase)">
            <summary>
            Gets a routed link that navigates to the <paramref name="state"/> passing 
            the <paramref name="data"/>
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> to navigate to</param>
            <param name="data">The data to pass when navigating</param>
            <param name="context">The current context</param>
            <returns>The routed navigation link</returns>
        </member>
        <member name="M:Navigation.StateHandler.GetNavigationData(Navigation.State,System.Web.HttpContextBase)">
            <summary>
            Gets the data parsed from the Route and QueryString of the <paramref name="context"/>
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> navigated to</param>
            <param name="context">The current context</param>
            <returns>The navigation data</returns>
        </member>
        <member name="M:Navigation.StateHandler.NavigateLink(Navigation.State,System.String,Navigation.NavigationMode,System.Web.HttpContextBase)">
            <summary>
            Redirects or Transfers to the <paramref name="url"/> depending on the 
            <paramref name="mode"/> specified
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> to navigate to</param>
            <param name="url">The target location</param>
            <param name="mode">Indicates whether to Redirect or Transfer</param>
            <param name="context">The current context</param>
        </member>
        <member name="M:Navigation.StateHandler.GetRouteName(Navigation.State,System.Web.HttpContextBase)">
            <summary>
            Returns the route name of the <paramref name="state"/>
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> to navigate to</param>
            <param name="context">The current context</param>
            <returns>The route name</returns>
        </member>
        <member name="M:Navigation.StateHandler.GetEndResponse(Navigation.State,System.Web.HttpContextBase)">
            <summary>
            Gets an indicator determining whether to terminate the current process when
            navigating with a <see cref="F:Navigation.NavigationMode.Client"/> mode
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> to navigate to</param>
            <param name="context">The current context</param>
            <returns>Current process termination indicator</returns>
        </member>
        <member name="M:Navigation.StateHandler.GetPermanent(Navigation.State,System.Web.HttpContextBase)">
            <summary>
            Gets an indicator determining whether to permanently redirect when
            navigating with a <see cref="F:Navigation.NavigationMode.Client"/> mode
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> to navigate to</param>
            <param name="context">The current context</param>
            <returns>Permanent redirection indicator</returns>
        </member>
        <member name="M:Navigation.StateHandler.GetPreserveForm(Navigation.State,System.Web.HttpContextBase)">
            <summary>
            Gets an indicator determining whether to preserve the <see cref="P:System.Web.HttpRequest.Form"/>
            and <see cref="P:System.Web.HttpRequest.QueryString"/> collections when navigating with a
            <see cref="F:Navigation.NavigationMode.Server"/> mode
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> to navigate to</param>
            <param name="context">The current context</param>
            <returns>Request collections perservation indicator</returns>
        </member>
        <member name="M:Navigation.MvcStateHandler.GetNavigationData(Navigation.State,System.Web.HttpContextBase)">
            <summary>
            Gets the data parsed from the Route and QueryString of the <paramref name="context"/>
            with the controller and action Route defaults removed
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> navigated to</param>
            <param name="context">The current context</param>
            <returns>The navigation data</returns>
        </member>
        <member name="M:Navigation.MvcStateHandler.GetRouteName(Navigation.State,System.Web.HttpContextBase)">
            <summary>
            Returns the route name of the <paramref name="state"/>
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> to navigate to</param>
            <param name="context">The current context</param>
            <returns>The route name</returns>
        </member>
        <member name="T:Navigation.MvcStateRouteHandler">
            <summary>
            Creates the <see cref="T:Navigation.StateContext"/> for the MVC <see cref="P:Navigation.MvcStateRouteHandler.State"/>
            </summary>
        </member>
        <member name="M:Navigation.MvcStateRouteHandler.#ctor(Navigation.State)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.MvcStateRouteHandler"/> class
            </summary>
            <param name="state">The <see cref="P:Navigation.MvcStateRouteHandler.State"/> this route handler is associated with</param>
        </member>
        <member name="M:Navigation.MvcStateRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            Returns the object that processes the request
            </summary>
            <param name="requestContext">An object that encapsulates information about the request</param>
            <returns>The object that processes the request</returns>
        </member>
        <member name="P:Navigation.MvcStateRouteHandler.State">
            <summary>
            Gets the <see cref="P:Navigation.MvcStateRouteHandler.State"/> this route handler is associated with
            </summary>
        </member>
        <member name="T:Navigation.NavigateBackResult">
            <summary>
            Controls the processing of application actions by navigating via a call to
            <see cref="M:Navigation.StateController.NavigateBack(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Navigation.NavigateBackResult.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.NavigateBackResult"/> class
            </summary>
            <param name="distance">Starting at 1, the number of <see cref="T:Navigation.Crumb"/> steps
            to go back</param>
        </member>
        <member name="M:Navigation.NavigateBackResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Navigates via a call to <see cref="M:Navigation.StateController.NavigateBack(System.Int32)"/>
            </summary>
            <param name="context">The context within which the result is executed</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null</exception>
            <exception cref="T:System.ArgumentException"><see cref="M:Navigation.StateController.CanNavigateBack(System.Int32)"/>
            returns false for this <see cref="P:Navigation.NavigateBackResult.Distance"/></exception>
            <exception cref="T:System.InvalidOperationException">A mandatory route parameter has not been
            supplied a value</exception>
        </member>
        <member name="P:Navigation.NavigateBackResult.Distance">
            <summary>
            Starting at 1, the number of <see cref="T:Navigation.Crumb"/> steps to go back
            </summary>
        </member>
        <member name="T:Navigation.NavigateResult">
            <summary>
            Controls the processing of application actions by navigating via a call to
            <see cref="M:Navigation.StateController.Navigate(System.String,Navigation.NavigationData)"/>
            </summary>
        </member>
        <member name="M:Navigation.NavigateResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.NavigateResult"/> class
            </summary>
            <param name="action">The key of a child <see cref="T:Navigation.Transition"/> or the key of 
            a <see cref="T:Navigation.Dialog"/></param>
        </member>
        <member name="M:Navigation.NavigateResult.#ctor(System.String,Navigation.NavigationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.NavigateResult"/> class
            </summary>
            <param name="action">The key of a child <see cref="T:Navigation.Transition"/> or the key of 
            a <see cref="T:Navigation.Dialog"/></param>
            <param name="toData">The <see cref="T:Navigation.NavigationData"/> to be passed to the next
            <see cref="T:Navigation.State"/> and stored in the <see cref="T:Navigation.StateContext"/></param>
        </member>
        <member name="M:Navigation.NavigateResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Navigates via a call to <see cref="M:Navigation.StateController.Navigate(System.String,Navigation.NavigationData)"/>
            </summary>
            <param name="context">The context within which the result is executed</param>
            <exception cref="T:System.ArgumentNullException"><see cref="P:Navigation.NavigateResult.Action"/> is null or
            <paramref name="context"/> is null</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:Navigation.NavigateResult.Action"/> does not match the key
            of a child <see cref="T:Navigation.Transition"/> or the key of a <see cref="T:Navigation.Dialog"/>; or there is 
            <see cref="T:Navigation.NavigationData"/> that cannot be converted to a <see cref="T:System.String"/></exception>
        </member>
        <member name="P:Navigation.NavigateResult.Action">
            <summary>
            The key of a child <see cref="T:Navigation.Transition"/> or the key of a <see cref="T:Navigation.Dialog"/>
            </summary>
        </member>
        <member name="P:Navigation.NavigateResult.ToData">
            <summary>
            The <see cref="T:Navigation.NavigationData"/> to be passed to the next <see cref="T:Navigation.State"/> and
            stored in the <see cref="T:Navigation.StateContext"/>
            </summary>
        </member>
        <member name="T:Navigation.NavigationDataMvcValueProvider">
            <summary>
            Represents a value provider for <see cref="T:Navigation.NavigationData"/> values
            </summary>
        </member>
        <member name="M:Navigation.NavigationDataMvcValueProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.NavigationDataMvcValueProvider"/> class
            </summary>
        </member>
        <member name="T:Navigation.NavigationDataMvcValueProviderFactory">
            <summary>
            Represents a factory for creating <see cref="T:Navigation.NavigationData"/> value provider objects
            </summary>
        </member>
        <member name="M:Navigation.NavigationDataMvcValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
            <summary>
            Returns a <see cref="T:Navigation.NavigationData"/> value provider for the specified controller context
            </summary>
            <param name="controllerContext">The context within which the result is executed</param>
            <returns><see cref="T:Navigation.NavigationData"/> value provider</returns>
        </member>
        <member name="T:Navigation.PagerExtensions">
            <summary>
            Represents support for HTML in a navigation application
            </summary>
        </member>
        <member name="M:Navigation.PagerExtensions.Pager(System.Web.Mvc.HtmlHelper,System.Object)">
            <summary>
            Returns an unordered list of anchor elements with href attributes set from a call to
            <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/> passing the new start row
            index
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An unordered list of anchor elements</returns>
        </member>
        <member name="M:Navigation.PagerExtensions.Pager(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object)">
            <summary>
            Returns an unordered list of anchor elements with href attributes set from a call to
            <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/> passing the new start row
            index
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="startRowIndexKey">The start row index <see cref="T:Navigation.NavigationData"/> key</param>
            <param name="maximumRowsKey">The maximum rows <see cref="T:Navigation.NavigationData"/> key</param>
            <param name="totalRowCountKey">The total row count <see cref="T:Navigation.NavigationData"/> key</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An unordered list of anchor elements</returns>
        </member>
        <member name="M:Navigation.PagerExtensions.Pager(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Returns an unordered list of anchor elements with href attributes set from a call to
            <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/> passing the new start row
            index
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="firstText">The inner text of the first page anchor element</param>
            <param name="previousText">The inner text of the previous page anchor element</param>
            <param name="nextText">The inner text of the next page anchor element</param>
            <param name="lastText">The inner text of the last page anchor element</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An unordered list of anchor elements</returns>
        </member>
        <member name="M:Navigation.PagerExtensions.Pager(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Returns an unordered list of anchor elements with href attributes set from a call to
            <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/> passing the new start row
            index
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="firstText">The inner text of the first page anchor element</param>
            <param name="previousText">The inner text of the previous page anchor element</param>
            <param name="nextText">The inner text of the next page anchor element</param>
            <param name="lastText">The inner text of the last page anchor element</param>
            <param name="startRowIndexKey">The start row index <see cref="T:Navigation.NavigationData"/> key</param>
            <param name="maximumRowsKey">The maximum rows <see cref="T:Navigation.NavigationData"/> key</param>
            <param name="totalRowCountKey">The total row count <see cref="T:Navigation.NavigationData"/> key</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An unordered list of anchor elements</returns>
        </member>
        <member name="M:Navigation.PagerExtensions.Pager(System.Web.Mvc.HtmlHelper,System.Int32,System.Object)">
            <summary>
            Returns an unordered list of anchor elements with href attributes set from a call to
            <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/> passing the new start row
            index
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="numberOfLinks">The number of anchor elements to display</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An unordered list of anchor elements</returns>
        </member>
        <member name="M:Navigation.PagerExtensions.Pager(System.Web.Mvc.HtmlHelper,System.Int32,System.String,System.String,System.String,System.Object)">
            <summary>
            Returns an unordered list of anchor elements with href attributes set from a call to
            <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/> passing the new start row
            index
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="numberOfLinks">The number of anchor elements to display</param>
            <param name="startRowIndexKey">The start row index <see cref="T:Navigation.NavigationData"/> key</param>
            <param name="maximumRowsKey">The maximum rows <see cref="T:Navigation.NavigationData"/> key</param>
            <param name="totalRowCountKey">The total row count <see cref="T:Navigation.NavigationData"/> key</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An unordered list of anchor elements</returns>
        </member>
        <member name="M:Navigation.PagerExtensions.Pager(System.Web.Mvc.HtmlHelper,System.Int32,System.String,System.String,System.Object)">
            <summary>
            Returns an unordered list of anchor elements with href attributes set from a call to
            <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/> passing the new start row
            index
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="numberOfLinks">The number of anchor elements to display</param>
            <param name="previousText">The inner text of the previous pages anchor element</param>
            <param name="nextText">The inner text of the next pages anchor element</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An unordered list of anchor elements</returns>
        </member>
        <member name="M:Navigation.PagerExtensions.Pager(System.Web.Mvc.HtmlHelper,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Returns an unordered list of anchor elements with href attributes set from a call to
            <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/> passing the new start row
            index
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="numberOfLinks">The number of anchor elements to display</param>
            <param name="previousText">The inner text of the previous pages anchor element</param>
            <param name="nextText">The inner text of the next pages anchor element</param>
            <param name="startRowIndexKey">The start row index <see cref="T:Navigation.NavigationData"/> key</param>
            <param name="maximumRowsKey">The maximum rows <see cref="T:Navigation.NavigationData"/> key</param>
            <param name="totalRowCountKey">The total row count <see cref="T:Navigation.NavigationData"/> key</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An unordered list of anchor elements</returns>
        </member>
        <member name="T:Navigation.RefreshAjaxAttribute">
            <summary>
            Represents an attribute used to mark an action method capable of handling refresh
            ajax requests
            </summary>
        </member>
        <member name="M:Navigation.RefreshAjaxAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            Responds to a refresh ajax request by overriding the default output writing
            </summary>
            <param name="filterContext">The filter context</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filterContext"/> is null</exception>
        </member>
        <member name="M:Navigation.RefreshAjaxAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
            <summary>
            Responds to a refresh ajax request by writing the updated panel content as JSON
            </summary>
            <param name="filterContext">The filter context</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filterContext"/> is null</exception>
        </member>
        <member name="T:Navigation.RefreshResult">
            <summary>
            Controls the processing of application actions by navigating via a call to
            <see cref="M:Navigation.StateController.Refresh(Navigation.NavigationData)"/>
            </summary>
        </member>
        <member name="M:Navigation.RefreshResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.RefreshResult"/> class
            </summary>
        </member>
        <member name="M:Navigation.RefreshResult.#ctor(Navigation.NavigationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.RefreshResult"/> class
            </summary>
            <param name="toData">The <see cref="T:Navigation.NavigationData"/> to be passed to the current
            <see cref="T:Navigation.State"/> and stored in the <see cref="T:Navigation.StateContext"/></param>
        </member>
        <member name="M:Navigation.RefreshResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Navigates via a call to <see cref="M:Navigation.StateController.Refresh(Navigation.NavigationData)"/>
            </summary>
            <param name="context">The context within which the result is executed</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null</exception>
            <exception cref="T:System.ArgumentException">There is <see cref="T:Navigation.NavigationData"/> that cannot
            be converted to a <see cref="T:System.String"/></exception>
            <exception cref="T:System.InvalidOperationException">A mandatory route parameter has not been 
            supplied a value</exception>
        </member>
        <member name="P:Navigation.RefreshResult.ToData">
            <summary>
            The <see cref="T:Navigation.NavigationData"/> to be passed to the current <see cref="T:Navigation.State"/> and
            stored in the <see cref="T:Navigation.StateContext"/>
            </summary>
        </member>
        <member name="T:Navigation.SorterExtensions">
            <summary>
            Represents support for HTML in a navigation application
            </summary>
        </member>
        <member name="M:Navigation.SorterExtensions.Sorter(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Returns an anchor element (a element) with its href attribute set from a call to
            <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/> passing the new sort
            expression
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="linkText">The inner text of the anchor element</param>
            <param name="sortBy">The column name to sort by</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An anchor element (a element)</returns>
            <exception cref="T:System.ArgumentException"><paramref name="linkText"/> is null or empty or
            <paramref name="sortBy"/> is null or empty</exception>
        </member>
        <member name="M:Navigation.SorterExtensions.Sorter(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object)">
            <summary>
            Returns an anchor element (a element) with its href attribute set from a call to
            <see cref="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)"/> passing the new sort
            expression
            </summary>
            <param name="htmlHelper">The HTML helper instance that this method extends</param>
            <param name="linkText">The inner text of the anchor element</param>
            <param name="sortBy">The column name to sort by</param>
            <param name="sortExpressionKey">The sort expression <see cref="T:Navigation.NavigationData"/> key</param>
            <param name="htmlAttributes">An object that contains the HTML attributes to set for the
            element</param>
            <returns>An anchor element (a element)</returns>
            <exception cref="T:System.ArgumentException"><paramref name="linkText"/> is null or empty or
            <paramref name="sortBy"/> is null or empty</exception>
        </member>
        <member name="T:Navigation.NavigationDataWebApiValueProvider">
            <summary>
            Represents a value provider for <see cref="T:Navigation.NavigationData"/> values
            </summary>
        </member>
        <member name="M:Navigation.NavigationDataWebApiValueProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.NavigationDataWebApiValueProvider"/> class
            </summary>
        </member>
        <member name="M:Navigation.NavigationDataWebApiValueProvider.ContainsPrefix(System.String)">
            <summary>
            Determines whether the <see cref="T:Navigation.NavigationData"/> contains the specified prefix
            </summary>
            <param name="prefix">The prefix to search for</param>
            <returns>True if the collection contains the specified prefix; otherwise, false</returns>
        </member>
        <member name="M:Navigation.NavigationDataWebApiValueProvider.GetValue(System.String)">
            <summary>
            Retrieves a <see cref="T:Navigation.NavigationData"/> value for the specified key
            </summary>
            <param name="key">The key for the <see cref="T:Navigation.NavigationData"/> item</param>
            <returns>The value of <see cref="T:Navigation.NavigationData"/> item</returns>
        </member>
        <member name="T:Navigation.NavigationDataValueWebApiProviderFactory">
            <summary>
            Represents a factory for creating <see cref="T:Navigation.NavigationData"/> value provider objects
            </summary>
        </member>
        <member name="M:Navigation.NavigationDataValueWebApiProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Returns a <see cref="T:Navigation.NavigationData"/> value provider for the specified action context
            </summary>
            <param name="actionContext">The context within which the result is executed</param>
            <returns><see cref="T:Navigation.NavigationData"/> value provider</returns>
        </member>
        <member name="T:Navigation.WebApiStateHandler">
            <summary>
            Implementation of <see cref="T:Navigation.IStateHandler"/> that builds and parses
            navigation links for an Web Api <see cref="T:Navigation.State"/>
            </summary>
        </member>
        <member name="M:Navigation.WebApiStateHandler.GetNavigationLink(Navigation.State,System.Collections.Specialized.NameValueCollection,System.Web.HttpContextBase)">
            <summary>
            Gets a routed link that navigates to the <paramref name="state"/> passing 
            the <paramref name="data"/> with the httproute key removed
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> to navigate to</param>
            <param name="data">The data to pass when navigating</param>
            <param name="context">The current context</param>
            <returns>The routed navigation link</returns>
        </member>
        <member name="M:Navigation.WebApiStateHandler.GetNavigationData(Navigation.State,System.Web.HttpContextBase)">
            <summary>
            Gets the data parsed from the Route and QueryString of the <paramref name="context"/>
            with the controller and action Route defaults removed
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> navigated to</param>
            <param name="context">The current context</param>
            <returns>The navigation data</returns>
        </member>
        <member name="M:Navigation.WebApiStateHandler.GetRouteName(Navigation.State,System.Web.HttpContextBase)">
            <summary>
            Returns the route name of the <paramref name="state"/>
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> to navigate to</param>
            <param name="context">The current context</param>
            <returns>The route name</returns>
        </member>
        <member name="T:Navigation.WebApiStateRouteHandler">
            <summary>
            Creates the <see cref="T:Navigation.StateContext"/> for the Web Api <see cref="P:Navigation.WebApiStateRouteHandler.State"/>
            </summary>
        </member>
        <member name="M:Navigation.WebApiStateRouteHandler.#ctor(Navigation.State)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.WebApiStateRouteHandler"/> class
            </summary>
            <param name="state">The <see cref="P:Navigation.WebApiStateRouteHandler.State"/> this route handler is associated with</param>
        </member>
        <member name="M:Navigation.WebApiStateRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            Returns the object that processes the request
            </summary>
            <param name="requestContext">An object that encapsulates information about the request</param>
            <returns>The object that processes the request</returns>
        </member>
        <member name="P:Navigation.WebApiStateRouteHandler.State">
            <summary>
            Gets the <see cref="P:Navigation.WebApiStateRouteHandler.State"/> this route handler is associated with
            </summary>
        </member>
        <member name="T:Navigation.CrumbTrailDataSource">
            <summary>
            Provides a data source control that a <see cref="T:System.Web.UI.Control"/> can use to bind
            to crumb trail data. A crumb trail is a <see cref="T:Navigation.Crumb"/> list with each crumb
            representing the <see cref="T:Navigation.State"/> and <see cref="T:Navigation.NavigationData"/>
            required to return to and recreate the <see cref="T:System.Web.UI.Page"/> as previously visited
            </summary>
        </member>
        <member name="M:Navigation.CrumbTrailDataSource.GetView(System.String)">
            <summary>
            Retrieves the named data source view that is associated with the data source control
            </summary>
            <param name="viewName">This parameter is ignored as only one view is supported</param>
            <returns>An associated <see cref="T:Navigation.CrumbTrailDataSourceView"/></returns>
        </member>
        <member name="T:Navigation.CrumbTrailDataSourceView">
            <summary>
            Supports the <see cref="T:Navigation.CrumbTrailDataSource"/> and provides an interface for data
            bound controls to display a crumb trail. A crumb trail is a <see cref="T:Navigation.Crumb"/> list with
            each crumb representing the <see cref="T:Navigation.State"/> and <see cref="T:Navigation.NavigationData"/>
            required to return to and recreate the <see cref="T:System.Web.UI.Page"/> as previously visited
            </summary>
        </member>
        <member name="M:Navigation.CrumbTrailDataSourceView.#ctor(Navigation.CrumbTrailDataSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.CrumbTrailDataSourceView"/>
            class
            </summary>
            <param name="owner">The <see cref="T:Navigation.CrumbTrailDataSource"/> this view is
            associated with</param>
        </member>
        <member name="M:Navigation.CrumbTrailDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)">
            <summary>
            Iterates through the <see cref="T:Navigation.Crumb"/> contents of <see cref="P:Navigation.StateController.Crumbs"/>
            </summary>
            <param name="arguments">This parameter is ignored</param>
            <returns>An <see cref="T:System.Collections.IEnumerable"/> list of <see cref="T:Navigation.Crumb"/> items</returns>
        </member>
        <member name="P:Navigation.CrumbTrailDataSourceView.CanInsert">
            <summary>
            Gets a value of false as only select functionality is supported
            </summary>
        </member>
        <member name="P:Navigation.CrumbTrailDataSourceView.CanDelete">
            <summary>
            Gets a value of false as only select functionality is supported
            </summary>
        </member>
        <member name="P:Navigation.CrumbTrailDataSourceView.CanUpdate">
            <summary>
            Gets a value of false as only select functionality is supported
            </summary>
        </member>
        <member name="T:Navigation.CrumbTrailPersister">
            <summary>
            Provides the base functionality for crumb trail persistence mechanisms
            </summary>
        </member>
        <member name="M:Navigation.CrumbTrailPersister.Load(System.String)">
            <summary>
            Overridden by derived classes to return the persisted crumb trail
            </summary>
            <param name="crumbTrail"> The key, returned from the <see cref="M:Navigation.CrumbTrailPersister.Save(System.String)"/> method, to identify 
            the persisted crumb trail</param>
            <returns>The crumb trail holding navigation and data information</returns>
        </member>
        <member name="M:Navigation.CrumbTrailPersister.Save(System.String)">
            <summary>
            Overridden by derived classes to persist the crumb trail
            </summary>
            <param name="crumbTrail">The crumb trail holding navigation and data information</param>
            <returns>The key to be passed to <see cref="M:Navigation.CrumbTrailPersister.Load(System.String)"/> method for crumb trail retrieval</returns>
        </member>
        <member name="T:Navigation.Dialog">
            <summary>
            Configures dialog information. Represents a logical grouping of child <see cref="T:Navigation.State"/> elements.
            Navigating across different dialogs will initialise the crumb trail
            </summary>
        </member>
        <member name="P:Navigation.Dialog.States">
            <summary>
            Gets the <see cref="T:Navigation.State"/> children
            </summary>
        </member>
        <member name="P:Navigation.Dialog.Index">
            <summary>
            Gets the number of the dialog
            </summary>
        </member>
        <member name="P:Navigation.Dialog.Initial">
            <summary>
            Gets the state to navigate to if the <see cref="P:Navigation.Dialog.Key"/> is passed as an action parameter
            to the <see cref="T:Navigation.StateController"/>
            </summary>
        </member>
        <member name="P:Navigation.Dialog.Key">
            <summary>
            Gets the key, unique across dialogs, which is passed as the action
            parameter to the <see cref="T:Navigation.StateController"/> when navigating
            </summary>
        </member>
        <member name="P:Navigation.Dialog.Title">
            <summary>
            Gets the textual description of the dialog. The resourceType and resourceKey attributes can be 
            used for localization
            </summary>
        </member>
        <member name="P:Navigation.Dialog.Attributes">
            <summary>
            Gets the list of attributes
            </summary>
        </member>
        <member name="P:Navigation.Dialog.Path">
            <summary>
            Gets the Url that will cause a navigation to the <see cref="P:Navigation.Dialog.Initial"/> state. It should not
            contain a query string although browsing to the Url with a query string will work and will pass
            the query string data as per normal <see cref="T:Navigation.NavigationData"/>
            </summary>
        </member>
        <member name="T:Navigation.HistoryNavigator">
            <summary>
            Provides history navigation functionality, adding a history point whenever an item
            in <see cref="T:Navigation.NavigationData"/> changes
            </summary>
        </member>
        <member name="M:Navigation.HistoryNavigator.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"/> event
            </summary>
            <param name="e">The event data</param>
        </member>
        <member name="M:Navigation.HistoryNavigator.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="M:System.Web.UI.Control.OnPreRender(System.EventArgs)"/> event
            </summary>
            <param name="e">The event data</param>
        </member>
        <member name="P:Navigation.HistoryNavigator.HistoryKeys">
            <summary>
            Gets or sets a comma separated list of <see cref="T:Navigation.NavigationData"/> items to track
            for changes
            </summary>
        </member>
        <member name="T:Navigation.NavigationData">
            <summary>
            Manages the data passed when navigating. It implements <see cref="T:System.Web.UI.IStateManager"/>
            and so maintains this data across post backs (in Web Forms). This data is accesssible from the
            state context <see cref="P:Navigation.StateContext.Data"/> property. It is stored on each
            <see cref="T:Navigation.Crumb"/> in a crumb trail as it represents the data required to recreate
            the <see cref="T:Navigation.State"/> as previously visited
            </summary>
        </member>
        <member name="M:Navigation.NavigationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.NavigationData"/> class
            </summary>
        </member>
        <member name="M:Navigation.NavigationData.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.NavigationData"/> class containing
            all the current <see cref="P:Navigation.StateContext.Data"/>
            </summary>
            <param name="includeCurrent">Identifies whether the current <see cref="P:Navigation.StateContext.Data"/>
            should be included</param>
        </member>
        <member name="M:Navigation.NavigationData.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.NavigationData"/> class containing
            a subset of the current <see cref="P:Navigation.StateContext.Data"/>
            </summary>
            <param name="currentDataKeys">The subset of the current <see cref="P:Navigation.StateContext.Data"/>
            to include</param>
        </member>
        <member name="M:Navigation.NavigationData.Add(System.String,System.Object)">
            <summary>
            Adds a new item to the underlying <see cref="T:System.Web.UI.StateBag"/>, updating the item
            if it already exists. If the <paramref name="value"/> is null the item is removed
            </summary>
            <param name="key">The key for the navigation data item</param>
            <param name="value">The value for navigation data item</param>
        </member>
        <member name="M:Navigation.NavigationData.Remove(System.String)">
            <summary>
            Removes the specified key/value pair from the <see cref="T:System.Web.UI.StateBag"/>. This
            is the equivalent of setting the value to null
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Navigation.NavigationData.Clear">
            <summary>
            Removes all items from the <see cref="T:Navigation.NavigationData"/>
            </summary>
        </member>
        <member name="M:Navigation.NavigationData.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through
            the <see cref="T:Navigation.NavigationDataItem"/> elements
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for
            the <see cref="T:Navigation.NavigationData"/></returns>
        </member>
        <member name="P:Navigation.NavigationData.Item(System.String)">
            <summary>
            Gets or sets the value of an item stored in the <see cref="T:System.Web.UI.StateBag"/>
            </summary>
            <param name="key">The key for the navigation data item</param>
            <returns>The value for navigation data item</returns>
        </member>
        <member name="P:Navigation.NavigationData.Bag">
            <summary>
            Gets the dynamic <see cref="T:Navigation.NavigationData"/>
            </summary>
        </member>
        <member name="T:Navigation.NavigationDataExpressionBuilder">
            <summary>
            Creates <see cref="T:Navigation.NavigationData"/> that corresponds to specified key/value pairs.
            </summary>
        </member>
        <member name="M:Navigation.NavigationDataExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
            <summary>
            Creates <see cref="T:Navigation.NavigationData"/> that corresponds to specified key/value pairs
            </summary>
            <param name="target">Not used in this implementation</param>
            <param name="entry">The property that the expression is bound to</param>
            <param name="parsedData">Not used in this implementation</param>
            <param name="context">Not used in this implementation</param>
            <returns>The <see cref="T:Navigation.NavigationData"/> that corresponds to specified key/value pairs</returns>
        </member>
        <member name="M:Navigation.NavigationDataExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
            <summary>
             Returns a code expression that is used to perform the property assignment in the generated page class
            </summary>
            <param name="entry">The property that the expression is bound to</param>
            <param name="parsedData">Not used in this implementation</param>
            <param name="context">Not used in this implementation</param>
            <returns>A <see cref="T:System.CodeDom.CodeExpression"/> instance that is used in the property assignment</returns>
        </member>
        <member name="T:Navigation.NavigationDataItem">
            <summary>
            The <see cref="T:System.Type"/> of items returned when enumerating 
            over <see cref="T:Navigation.NavigationData"/>
            </summary>
        </member>
        <member name="P:Navigation.NavigationDataItem.Key">
            <summary>
            Gets the key of the item
            </summary>
        </member>
        <member name="P:Navigation.NavigationDataItem.Value">
            <summary>
            Gets the value of the item
            </summary>
        </member>
        <member name="T:Navigation.NavigationDataParameter">
            <summary>
            Binds the value of a <see cref="T:Navigation.NavigationData"/> item to a parameter object
            </summary>
        </member>
        <member name="M:Navigation.NavigationDataParameter.#ctor">
            <summary>
            Initializes a new unnamed instance of the <see cref="T:Navigation.NavigationDataParameter"/> 
            class
            </summary>
        </member>
        <member name="M:Navigation.NavigationDataParameter.#ctor(Navigation.NavigationDataParameter)">
            <summary>
            Initializes a new unnamed instance of the <see cref="T:Navigation.NavigationDataParameter"/> 
            class, using the values of the instance that is specified by the <paramref name="original"/>
            parameter
            </summary>
            <param name="original">A <see cref="T:Navigation.NavigationDataParameter"/> instance from which
            the current instance is initialized</param>
        </member>
        <member name="M:Navigation.NavigationDataParameter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new named instance of the <see cref="T:Navigation.NavigationDataParameter"/> 
            class, using the <paramref name="key"/> to identify which <see cref="T:Navigation.NavigationData"/>
            item to bind to. If the <paramref name="key"/> is null the <paramref name="name"/> will
            be used instead
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="key">The name of the <see cref="T:Navigation.NavigationData"/> item that the 
            parameter object is bound to</param>
        </member>
        <member name="M:Navigation.NavigationDataParameter.Clone">
            <summary>
            Returns a duplicate of the current <see cref="T:Navigation.NavigationDataParameter"/> instance
            </summary>
            <returns>A duplicate of the current instance</returns>
        </member>
        <member name="M:Navigation.NavigationDataParameter.Evaluate(System.Web.HttpContext,System.Web.UI.Control)">
            <summary>
            Returns the value of the <see cref="T:Navigation.NavigationData"/> item identified by 
            the <see cref="P:Navigation.NavigationDataParameter.Key"/>
            </summary>
            <param name="context">The current <see cref="T:System.Web.HttpContext"/> instance of the
            request</param>
            <param name="control">This parameter is ignored as not relevant</param>
            <returns>The current value of the <see cref="T:Navigation.NavigationData"/> item. If
            <see cref="P:Navigation.NavigationDataParameter.Reset"/> is true, it returns null</returns>
        </member>
        <member name="P:Navigation.NavigationDataParameter.Key">
            <summary>
            Gets or sets the key of the <see cref="T:Navigation.NavigationData"/> item that the parameter 
            binds to. If this is null the Name property is used instead.
            For scenarios where the key is only known at runtime, set the ControlID to point to the
            Control holding the key
            </summary>
        </member>
        <member name="P:Navigation.NavigationDataParameter.Reset">
            <summary>
            Gets or sets whether to reset the value of the parameter. If this is true the DefaultValue will always
            be used
            </summary>
        </member>
        <member name="T:Navigation.NavigationDataSource">
            <summary>
            Provides a data source control that a <see cref="T:System.Web.UI.Control"/> can use to bind
            to the <see cref="T:Navigation.NavigationData"/> contained in the 
            <see cref="P:Navigation.StateContext.Data">State Context</see>. Select and update functionality
            is supported
            </summary>
        </member>
        <member name="M:Navigation.NavigationDataSource.GetView(System.String)">
            <summary>
            Retrieves the named data source view that is associated with the data source control
            </summary>
            <param name="viewName">This parameter is ignored as only one view is supported</param>
            <returns>An associated <see cref="T:Navigation.NavigationDataSourceView"/></returns>
        </member>
        <member name="M:Navigation.NavigationDataSource.OnInit(System.EventArgs)">
            <summary>
            Adds a <see cref="E:System.Web.UI.Page.LoadComplete"/> event handler to the page that contains
            the <see cref="T:Navigation.NavigationDataSource"/> control
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data</param>
        </member>
        <member name="M:Navigation.NavigationDataSource.LoadViewState(System.Object)">
            <summary>
            Loads the previously saved view state of the <see cref="T:Navigation.NavigationDataSource"/>
            and its associated <see cref="T:Navigation.NavigationDataSourceView"/>
            </summary>
            <param name="savedState">The saved view state values for the control</param>
        </member>
        <member name="M:Navigation.NavigationDataSource.SaveViewState">
            <summary>
            Saves the view state of the <see cref="T:Navigation.NavigationDataSource"/> and its
            associated <see cref="T:Navigation.NavigationDataSourceView"/>
            </summary>
            <returns>Returns the view state of the <see cref="T:Navigation.NavigationDataSource"/>
            and its associated <see cref="T:Navigation.NavigationDataSourceView"/></returns>
        </member>
        <member name="M:Navigation.NavigationDataSource.TrackViewState">
            <summary>
            Tracks view state changes of the <see cref="T:Navigation.NavigationDataSource"/> and its
            associated <see cref="T:Navigation.NavigationDataSourceView"/>
            </summary>
        </member>
        <member name="P:Navigation.NavigationDataSource.ConvertEmptyStringToNull">
            <summary>
            Gets or sets a value indicating whether bound values passed during an update should 
            be converted to null if they are <see cref="F:System.String.Empty"/>.
            This is ignored for <see cref="P:Navigation.NavigationDataSource.UpdateParameters"/> as their own 
            <see cref="P:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull"/> value
            will be used instead
            </summary>
        </member>
        <member name="P:Navigation.NavigationDataSource.SelectParameters">
            <summary>
            Gets the parameters collection used to set default values to help with binding to 
            non-nullable <see cref="T:System.Web.UI.Control"/> properties
            </summary>
        </member>
        <member name="P:Navigation.NavigationDataSource.UpdateParameters">
            <summary>
            Gets the parameters collection used to set <see cref="P:Navigation.StateContext.Data"/> values
            not bound to <see cref="T:System.Web.UI.Control"/> properties
            </summary>
        </member>
        <member name="T:Navigation.NavigationDataSourceView">
            <summary>
            Supports the <see cref="T:Navigation.NavigationDataSource"/> and provides an 
            interface for data bound controls to select and update <see cref="T:Navigation.NavigationData"/> 
            contained in the <see cref="P:Navigation.StateContext.Data">State Context</see>
            </summary>
        </member>
        <member name="M:Navigation.NavigationDataSourceView.#ctor(Navigation.NavigationDataSource,System.Web.HttpContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.NavigationDataSourceView"/>
            class
            </summary>
            <param name="owner">The <see cref="T:Navigation.NavigationDataSource"/> this view is
            associated with</param>
            <param name="context">The current <see cref="T:System.Web.HttpContext"/></param>
        </member>
        <member name="M:Navigation.NavigationDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)">
            <summary>
            Provides access to the current <see cref="P:Navigation.StateContext.Data">State Context</see>
            set with any values specified in the <see cref="P:Navigation.NavigationDataSourceView.SelectParameters"/> collection
            </summary>
            <param name="arguments">This parameter is ignored as <see cref="T:Navigation.NavigationData"/>
            only supports getting values by key</param>
            <returns>A copy of the <see cref="P:Navigation.StateContext.Data">State Context</see></returns>
        </member>
        <member name="M:Navigation.NavigationDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Updates the current <see cref="P:Navigation.StateContext.Data">State Context</see> using any
            parameters that are supplied in the <see cref="P:Navigation.NavigationDataSourceView.UpdateParameters"/> and <paramref name="values"/>
            collections
            </summary>
            <param name="keys">This parameter is ignored as <see cref="T:Navigation.NavigationData"/>
            only supports getting values by key</param>
            <param name="values">A collection of bound <see cref="T:System.Web.UI.Control"/> property values</param>
            <param name="oldValues">This parameter is ignored as <see cref="T:Navigation.NavigationData"/>
            only supports getting values by key</param>
            <returns>Returns 0 as irrelevant to return number of updated values</returns>
        </member>
        <member name="M:Navigation.NavigationDataSourceView.LoadViewState(System.Object)">
            <summary>
            Loads the previously saved view state of the <see cref="P:Navigation.NavigationDataSourceView.SelectParameters"/>
            </summary>
            <param name="state">The saved view state values for the control</param>
        </member>
        <member name="M:Navigation.NavigationDataSourceView.SaveViewState">
            <summary>
            Saves the view state of the <see cref="P:Navigation.NavigationDataSourceView.SelectParameters"/>
            </summary>
            <returns>Returns the view state of the <see cref="P:Navigation.NavigationDataSourceView.SelectParameters"/></returns>
        </member>
        <member name="M:Navigation.NavigationDataSourceView.TrackViewState">
            <summary>
            Causes the <see cref="T:Navigation.NavigationDataSourceView"/> object to track changes to its
            view state so that the changes can be stored in the <see cref="P:System.Web.UI.Control.ViewState"/>
            object for the control and persisted across requests for the same page
            </summary>
        </member>
        <member name="P:Navigation.NavigationDataSourceView.ConvertEmptyStringToNull">
            <summary>
            Gets or sets a value indicating whether bound values passed during an update should 
            be converted to null if they are <see cref="F:System.String.Empty"/>.
            This is ignored for <see cref="P:Navigation.NavigationDataSourceView.UpdateParameters"/> as their own 
            <see cref="P:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull"/> value
            will be used instead
            </summary>
        </member>
        <member name="P:Navigation.NavigationDataSourceView.CanInsert">
            <summary>
            Gets a value of false as only select and update functionality is supported
            </summary>
        </member>
        <member name="P:Navigation.NavigationDataSourceView.CanDelete">
            <summary>
            Gets a value of false as only select and update functionality is supported
            </summary>
        </member>
        <member name="P:Navigation.NavigationDataSourceView.CanUpdate">
            <summary>
            Gets a value of true as <see cref="P:Navigation.StateContext.Data">State Context</see> update
            functionality is supported
            </summary>
        </member>
        <member name="P:Navigation.NavigationDataSourceView.SelectParameters">
            <summary>
            Gets the parameters collection used to set default values to help with binding to 
            non-nullable <see cref="T:System.Web.UI.Control"/> properties
            </summary>
        </member>
        <member name="P:Navigation.NavigationDataSourceView.UpdateParameters">
            <summary>
            Gets the parameters collection used to set <see cref="P:Navigation.StateContext.Data"/> values
            not bound to <see cref="T:System.Web.UI.Control"/> properties
            </summary>
        </member>
        <member name="P:Navigation.NavigationDataSourceView.IsTrackingViewState">
            <summary>
            Gets a value indicating whether the <see cref="T:Navigation.NavigationDataSourceView"/>
            object is saving changes to its view state
            </summary>
        </member>
        <member name="T:Navigation.NavigationDataTrigger">
            <summary>
            Defines a <see cref="T:Navigation.NavigationData"/> item as a trigger so that when it changes
            it causes an <see cref="T:System.Web.UI.UpdatePanel"/> to refresh
            </summary>
        </member>
        <member name="M:Navigation.NavigationDataTrigger.HasTriggered">
            <summary>
            Returns a value indicating whether the <see cref="T:Navigation.NavigationData"/> item identified by
            the <see cref="P:Navigation.NavigationDataTrigger.Key"/> has changed
            </summary>
            <returns>True if the item has changed; false otherwise</returns>
        </member>
        <member name="M:Navigation.NavigationDataTrigger.Initialize">
            <summary>
            Stores the initial value of the <see cref="T:Navigation.NavigationData"/> item identified by
            the <see cref="P:Navigation.NavigationDataTrigger.Key"/>
            </summary>
        </member>
        <member name="P:Navigation.NavigationDataTrigger.Key">
            <summary>
            Gets or sets the key of the <see cref="T:Navigation.NavigationData"/> item
            </summary>
        </member>
        <member name="T:Navigation.NavigationDirection">
            <summary>
            Specifies the direction of navigation performed by the <see cref="T:Navigation.StateController"/>.
            </summary>
        </member>
        <member name="F:Navigation.NavigationDirection.Forward">
            <summary>
            Navigates either to the 'to' <see cref="T:Navigation.State"/> of a <see cref="T:Navigation.Transition"/>
            or the 'initial' <see cref="T:Navigation.State"/> of a <see cref="T:Navigation.Dialog"/>
            </summary>
        </member>
        <member name="F:Navigation.NavigationDirection.Back">
            <summary>
            Navigates back to the <see cref="T:Navigation.Crumb"/> contained in the crumb trail, represented by
            the <see cref="P:Navigation.StateController.Crumbs"/> collection
            </summary>
        </member>
        <member name="F:Navigation.NavigationDirection.Refresh">
            <summary>
             Navigates to the current <see cref="T:Navigation.State"/>
            </summary>
        </member>
        <member name="T:Navigation.NavigationHyperLink">
            <summary>
            A control that displays a link that navigates to another <see cref="T:Navigation.State"/>. This can be 
            forward using an action parameter; backward via a <see cref="T:Navigation.Crumb"/>; or refreshing the
            current <see cref="T:Navigation.State"/>.
            </summary>
        </member>
        <member name="M:Navigation.NavigationHyperLink.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sets the Url depending on the <see cref="P:Navigation.NavigationHyperLink.Direction"/> and adds the attributes of 
            a <see cref="T:Navigation.NavigationHyperLink"/> control to the output stream for rendering 
            </summary>
            <param name="writer">The output stream to render on the client</param>
        </member>
        <member name="M:Navigation.NavigationHyperLink.LoadViewState(System.Object)">
            <summary>
            Loads the previously saved view state of the <see cref="T:Navigation.NavigationHyperLink"/>
            </summary>
            <param name="savedState">The saved view state values for the control</param>
        </member>
        <member name="M:Navigation.NavigationHyperLink.SaveViewState">
            <summary>
            Saves the view state of the <see cref="T:Navigation.NavigationHyperLink"/>
            </summary>
            <returns>Returns the view state of the <see cref="T:Navigation.NavigationHyperLink"/></returns>
        </member>
        <member name="M:Navigation.NavigationHyperLink.OnPreNavigationDataChange(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Navigation.NavigationHyperLink.PreNavigationDataChange"/> event.
            This is only relevant if the <see cref="P:Navigation.NavigationHyperLink.Direction"/> is <see cref="F:Navigation.NavigationDirection.Refresh"/>
            and <see cref="P:Navigation.NavigationHyperLink.PostBack"/> is set to true and javascript is on
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> containing the event data</param>
        </member>
        <member name="M:Navigation.NavigationHyperLink.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Navigation.NavigationHyperLink.Click"/> event.
            This is only relevant if the <see cref="P:Navigation.NavigationHyperLink.Direction"/> is <see cref="F:Navigation.NavigationDirection.Refresh"/>
            and <see cref="P:Navigation.NavigationHyperLink.PostBack"/> is set to true and javascript is on
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> containing the event data</param>
        </member>
        <member name="M:Navigation.NavigationHyperLink.OnCommand(System.Web.UI.WebControls.CommandEventArgs)">
            <summary>
            Raises the <see cref="E:Navigation.NavigationHyperLink.Command"/> event.
            This is only relevant if the <see cref="P:Navigation.NavigationHyperLink.Direction"/> is <see cref="F:Navigation.NavigationDirection.Refresh"/>
            and <see cref="P:Navigation.NavigationHyperLink.PostBack"/> is set to true and javascript is on
            </summary>
            <param name="e"><see cref="T:System.Web.UI.WebControls.CommandEventArgs"/> containing the event data</param>
        </member>
        <member name="M:Navigation.NavigationHyperLink.RaisePostBackEvent(System.String)">
            <summary>
            Updates <see cref="P:Navigation.StateContext.Data">State Context</see> when the <see cref="T:Navigation.NavigationHyperLink"/>
            posts back to the server
            </summary>
            <param name="eventArgument">The argument for the event</param>
        </member>
        <member name="P:Navigation.NavigationHyperLink.ToData">
            <summary>
            Gets or sets the <see cref="T:Navigation.NavigationData"/> to be passed to the next <see cref="T:Navigation.State"/>.
            This is only relevant if the <see cref="P:Navigation.NavigationHyperLink.Direction"/> is <see cref="F:Navigation.NavigationDirection.Forward"/>
            or <see cref="F:Navigation.NavigationDirection.Refresh"/>
            </summary>
        </member>
        <member name="P:Navigation.NavigationHyperLink.CurrentDataKeys">
            <summary>
            Gets or sets a comma separated list of <see cref="P:Navigation.StateContext.Data">State Context</see> items to
            include together with the <see cref="P:Navigation.NavigationHyperLink.ToData"/>. 
            This is only relevant if the <see cref="P:Navigation.NavigationHyperLink.Direction"/> is <see cref="F:Navigation.NavigationDirection.Forward"/>
            or <see cref="F:Navigation.NavigationDirection.Refresh"/>
            </summary>
        </member>
        <member name="P:Navigation.NavigationHyperLink.IncludeCurrentData">
            <summary>
            Gets or sets whether to include the <see cref="P:Navigation.StateContext.Data">State Context</see> together
            with the <see cref="P:Navigation.NavigationHyperLink.ToData"/>. 
            This is only relevant if the <see cref="P:Navigation.NavigationHyperLink.Direction"/> is <see cref="F:Navigation.NavigationDirection.Forward"/>
            or <see cref="F:Navigation.NavigationDirection.Refresh"/>
            </summary>
        </member>
        <member name="P:Navigation.NavigationHyperLink.ConvertEmptyStringToNull">
            <summary>
            Gets or sets a value indicating whether <see cref="P:Navigation.NavigationHyperLink.ToData"/> values should be converted to null 
            if they are <see cref="F:System.String.Empty"/>.
            This is only relevant if the <see cref="P:Navigation.NavigationHyperLink.Direction"/> is <see cref="F:Navigation.NavigationDirection.Refresh"/>
            and <see cref="P:Navigation.NavigationHyperLink.PostBack"/> is set to true and javascript is on
            </summary>
        </member>
        <member name="P:Navigation.NavigationHyperLink.Action">
            <summary>
            Gets or sets the key of a child <see cref="T:Navigation.Transition"/> or the key of a <see cref="T:Navigation.Dialog"/>.
            This is only relevant if the <see cref="P:Navigation.NavigationHyperLink.Direction"/> is <see cref="F:Navigation.NavigationDirection.Forward"/>
            </summary>
        </member>
        <member name="P:Navigation.NavigationHyperLink.Distance">
            <summary>
            Gets or sets the number of <see cref="T:Navigation.Crumb"/> steps to go back, starting at 1.
            This is only relevant if the <see cref="P:Navigation.NavigationHyperLink.Direction"/> is <see cref="F:Navigation.NavigationDirection.Back"/>
            </summary>
        </member>
        <member name="P:Navigation.NavigationHyperLink.Direction">
            <summary>
            Gets or sets the direction of the navigation
            </summary>
        </member>
        <member name="P:Navigation.NavigationHyperLink.PostBack">
            <summary>
            Gets or sets whether clicking the hyperlink will cause a PostBack if javascript is on. Can be used in conjunction
            with ASP.NET Ajax to implement the Single-Page Interface pattern that works with javascript off. 
            This is only relevant if the <see cref="P:Navigation.NavigationHyperLink.Direction"/> is <see cref="F:Navigation.NavigationDirection.Refresh"/>
            and javascript is on
            </summary>
        </member>
        <member name="P:Navigation.NavigationHyperLink.InertCssClass">
            <summary>
            Gets or sets the CSS class to apply when the <see cref="T:Navigation.NavigationHyperLink"/> is <see cref="P:Navigation.NavigationHyperLink.Inert"/>
            </summary>
        </member>
        <member name="P:Navigation.NavigationHyperLink.DisableInert">
            <summary>
            Gets or sets a value indicating whether to disable the <see cref="T:Navigation.NavigationHyperLink"/> when
            it is <see cref="P:Navigation.NavigationHyperLink.Inert"/>
            </summary>
        </member>
        <member name="P:Navigation.NavigationHyperLink.CommandName">
            <summary>
            Gets or sets the command name. This value is passed to the <see cref="E:Navigation.NavigationHyperLink.Command"/> event handler along with the
            <see cref="P:Navigation.NavigationHyperLink.CommandArgument"/>.
            This is only relevant if the <see cref="P:Navigation.NavigationHyperLink.Direction"/> is <see cref="F:Navigation.NavigationDirection.Refresh"/>
            and <see cref="P:Navigation.NavigationHyperLink.PostBack"/> is set to true and javascript is on
            </summary>
        </member>
        <member name="P:Navigation.NavigationHyperLink.CommandArgument">
            <summary>
            Gets or sets the command argument. This value is passed to the <see cref="E:Navigation.NavigationHyperLink.Command"/> event handler along with the
            <see cref="P:Navigation.NavigationHyperLink.CommandName"/>.
            This is only relevant if the <see cref="P:Navigation.NavigationHyperLink.Direction"/> is <see cref="F:Navigation.NavigationDirection.Refresh"/>
            and <see cref="P:Navigation.NavigationHyperLink.PostBack"/> is set to true and javascript is on
            </summary>
        </member>
        <member name="P:Navigation.NavigationHyperLink.FragmentIdentifier">
            <summary>
            Gets or sets an anchor identifying a specific location within the HTML
            </summary>
        </member>
        <member name="E:Navigation.NavigationHyperLink.PreNavigationDataChange">
            <summary>
            Occurs when the <see cref="T:Navigation.NavigationHyperLink"/> is clicked prior to the <see cref="P:Navigation.StateContext.Data"/>
            being updated.
            This is only relevant if the <see cref="P:Navigation.NavigationHyperLink.Direction"/> is <see cref="F:Navigation.NavigationDirection.Refresh"/>
            and <see cref="P:Navigation.NavigationHyperLink.PostBack"/> is set to true and javascript is on
            </summary>
        </member>
        <member name="E:Navigation.NavigationHyperLink.Click">
            <summary>
            Occurs when the <see cref="T:Navigation.NavigationHyperLink"/> is clicked.
            This is only relevant if the <see cref="P:Navigation.NavigationHyperLink.Direction"/> is <see cref="F:Navigation.NavigationDirection.Refresh"/>
            and <see cref="P:Navigation.NavigationHyperLink.PostBack"/> is set to true and javascript is on
            </summary>
        </member>
        <member name="E:Navigation.NavigationHyperLink.Command">
            <summary>
            Occurs when the <see cref="T:Navigation.NavigationHyperLink"/> is clicked.
            This is only relevant if the <see cref="P:Navigation.NavigationHyperLink.Direction"/> is <see cref="F:Navigation.NavigationDirection.Refresh"/>
            and <see cref="P:Navigation.NavigationHyperLink.PostBack"/> is set to true and javascript is on
            </summary>
        </member>
        <member name="P:Navigation.NavigationHyperLink.NextState">
            <summary>
            Gets the <see cref="T:Navigation.State"/> to navigate to depending on the <see cref="P:Navigation.NavigationHyperLink.Direction"/>.
            This can be forward using an action parameter; backward via a <see cref="T:Navigation.Crumb"/>;
            or refreshing the current <see cref="T:Navigation.State"/>
            </summary>
            <exception cref="T:System.ArgumentException"><see cref="P:Navigation.NavigationHyperLink.Action"/> is not the key of a child
            <see cref="T:Navigation.Transition"/> or <see cref="T:Navigation.Dialog"/>; or <see cref="P:Navigation.NavigationHyperLink.Distance"/>
            is outside the bounds of the crumb trail; or there is <see cref="T:Navigation.NavigationData"/> that
            cannot be converted to a <see cref="T:System.String"/></exception>
        </member>
        <member name="P:Navigation.NavigationHyperLink.Link">
            <summary>
            Gets a Url to navigate to a <see cref="T:Navigation.State"/> depending on the <see cref="P:Navigation.NavigationHyperLink.Direction"/>.
            This can be forward using an action parameter; backward via a <see cref="T:Navigation.Crumb"/>;
            or refreshing the current <see cref="T:Navigation.State"/>
            </summary>
            <exception cref="T:System.ArgumentException"><see cref="P:Navigation.NavigationHyperLink.Action"/> is not the key of a child
            <see cref="T:Navigation.Transition"/> or <see cref="T:Navigation.Dialog"/>; or <see cref="P:Navigation.NavigationHyperLink.Distance"/>
            is outside the bounds of the crumb trail; or there is <see cref="T:Navigation.NavigationData"/> that
            cannot be converted to a <see cref="T:System.String"/></exception>
        </member>
        <member name="P:Navigation.NavigationHyperLink.Inert">
            <summary>
            Gets a value indicating whether clicking the <see cref="T:Navigation.NavigationHyperLink"/> will leave
            the state context <see cref="P:Navigation.StateContext.State"/> and <see cref="P:Navigation.StateContext.Data"/>
            unchanged
            </summary>
        </member>
        <member name="T:Navigation.NavigationMode">
            <summary>
            Determines how a navigation performed by the <see cref="T:Navigation.StateController"/> is executed
            </summary>
        </member>
        <member name="F:Navigation.NavigationMode.Client">
            <summary>
            Navigates via a <see cref="M:System.Web.HttpResponse.Redirect(System.String,System.Boolean)">Response Redirect</see>
            </summary>
        </member>
        <member name="F:Navigation.NavigationMode.Server">
            <summary>
            Navigates via a <see cref="M:System.Web.HttpServerUtility.Transfer(System.String)">Server Transfer</see>
            </summary>
        </member>
        <member name="F:Navigation.NavigationMode.Mock">
            <summary>
            Navigates without executing a request for the new <see cref="T:Navigation.State"/>. This mode is 
            automatically used in a Unit Test environment but can be manually used in a Web environment
            </summary>
        </member>
        <member name="T:Navigation.NavigationSettings">
            <summary>
            Provides access to the Navigation Settings configuration section
            </summary>
        </member>
        <member name="P:Navigation.NavigationSettings.Config">
            <summary>
            
            </summary>
        </member>
        <member name="P:Navigation.NavigationSettings.OriginalUrlSeparators">
            <summary>
            Gets or sets whether to revert to using ! and _ as separators in the Url
            </summary>
        </member>
        <member name="P:Navigation.NavigationSettings.ApplicationPath">
            <summary>
            Gets or sets the application path to use outside of a web context
            </summary>
        </member>
        <member name="P:Navigation.NavigationSettings.LoginPath">
            <summary>
            Gets or sets the Url for the login page that the authentication provider will redirect to
            </summary>
        </member>
        <member name="P:Navigation.NavigationSettings.ReturnUrlKey">
            <summary>
            Gets or sets the query string key that identifies the Url the authentication provider will
            redirect to after a successful login
            </summary>
        </member>
        <member name="P:Navigation.NavigationSettings.StateIdKey">
            <summary>
            Gets or sets the key that identifies the StateId
            </summary>
        </member>
        <member name="P:Navigation.NavigationSettings.PreviousStateIdKey">
            <summary>
            Gets or sets the key that identifies the PreviousStateId
            </summary>
        </member>
        <member name="P:Navigation.NavigationSettings.ReturnDataKey">
            <summary>
            Gets or sets the key that identifies the ReturnData
            </summary>
        </member>
        <member name="P:Navigation.NavigationSettings.CrumbTrailKey">
            <summary>
            Gets or sets the key that identifies the CrumbTrail
            </summary>
        </member>
        <member name="T:Navigation.Pager">
            <summary>
            Provides paging functionality for any data-bound controls, typically used in conjunction with the
            <see cref="T:System.Web.UI.WebControls.ObjectDataSource"/> control.
            </summary>
        </member>
        <member name="M:Navigation.Pager.FindPageableItemContainer">
            <summary>
            Returns a <see cref="T:System.Web.UI.WebControls.IPageableItemContainer"/> that gets and sets paging
            information from <see cref="P:Navigation.StateContext.Data">Context Data</see>
            </summary>
            <returns><see cref="T:System.Web.UI.WebControls.IPageableItemContainer"/> that gets and sets paging
            information from <see cref="P:Navigation.StateContext.Data">Context Data</see></returns>
        </member>
        <member name="M:Navigation.Pager.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"/> event
            </summary>
            <param name="e">The event data</param>
        </member>
        <member name="M:Navigation.Pager.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Rewrites Urls as Navigation Urls if QueryStringField is populated and adds the attributes of 
            a <see cref="T:Navigation.Pager"/> control to the output stream for rendering 
            </summary>
            <param name="writer">The output stream to render on the client</param>
        </member>
        <member name="M:Navigation.Pager.RaisePostBackEvent(System.String)">
            <summary>
            Sets the paging data in <see cref="P:Navigation.StateContext.Data">State Context</see> when the
            <see cref="T:Navigation.Pager"/>'s hyperlinks post back to the server
            </summary>
            <param name="eventArgument">The argument for the event</param>
        </member>
        <member name="P:Navigation.Pager.StartRowIndexKey">
            <summary>B
            Gets or sets the StartRowIndex <see cref="T:Navigation.NavigationData"/> key
            </summary>
        </member>
        <member name="P:Navigation.Pager.MaximumRowsKey">
            <summary>
            Gets or sets the MaximumRows <see cref="T:Navigation.NavigationData"/> key
            </summary>
        </member>
        <member name="P:Navigation.Pager.TotalRowCountKey">
            <summary>
            Gets or sets the TotalRowCount <see cref="T:Navigation.NavigationData"/> key
            </summary>
        </member>
        <member name="P:Navigation.Pager.PostBackHyperLink">
            <summary>
            Gets or sets whether clicking the hyperlink will cause a PostBack if javascript is on. Can be used in conjunction
            with ASP.NET Ajax to implement the Single-Page Interface pattern that works with javascript off. 
            This is only relevant if QueryStringField is populated
            </summary>
        </member>
        <member name="T:Navigation.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Navigation.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Navigation.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Navigation.Resources.CannotNavigateInChildAction">
            <summary>
              Looks up a localized string similar to Child actions are not allowed to perform navigation actions.
            </summary>
        </member>
        <member name="P:Navigation.Resources.DialogAttributeMissing">
            <summary>
              Looks up a localized string similar to {0} is a mandatory attribute for a Dialog.
            </summary>
        </member>
        <member name="P:Navigation.Resources.DuplicateDialogKey">
            <summary>
              Looks up a localized string similar to A Dialog with key {0} already exists.
            </summary>
        </member>
        <member name="P:Navigation.Resources.DuplicateStateKey">
            <summary>
              Looks up a localized string similar to A State with key {0} already exists for Dialog {1}.
            </summary>
        </member>
        <member name="P:Navigation.Resources.DuplicateTransitionKey">
            <summary>
              Looks up a localized string similar to A Transition with key {0} already exists for State {1}.
            </summary>
        </member>
        <member name="P:Navigation.Resources.InvalidAction">
            <summary>
              Looks up a localized string similar to The action parameter must be a Dialog key or a Transition key that is a child of the current State.
            </summary>
        </member>
        <member name="P:Navigation.Resources.InvalidConversion">
            <summary>
              Looks up a localized string similar to {0} cannot convert to and from a string.
            </summary>
        </member>
        <member name="P:Navigation.Resources.InvalidConverterAttribute">
            <summary>
              Looks up a localized string similar to Navigation Data converter {0} is not valid.
            </summary>
        </member>
        <member name="P:Navigation.Resources.InvalidDialogInitialKey">
            <summary>
              Looks up a localized string similar to {0} Dialog&apos;s initial key of {1} does not match a child State key.
            </summary>
        </member>
        <member name="P:Navigation.Resources.InvalidDistance">
            <summary>
              Looks up a localized string similar to The distance parameter must be greater than zero and less than or equal to the number of Crumbs ({0}).
            </summary>
        </member>
        <member name="P:Navigation.Resources.InvalidDistanceString">
            <summary>
              Looks up a localized string similar to The string &apos;{0}&apos; is not a valid value for the distance to go back.
            </summary>
        </member>
        <member name="P:Navigation.Resources.InvalidEnumerableNavigationData">
            <summary>
              Looks up a localized string similar to ArrayList and Generic List are the only valid enumerable types in NavigationData.
            </summary>
        </member>
        <member name="P:Navigation.Resources.InvalidNavigationData">
            <summary>
              Looks up a localized string similar to No TypeConverter found for {0}.
            </summary>
        </member>
        <member name="P:Navigation.Resources.InvalidNavigationDataExpression">
            <summary>
              Looks up a localized string similar to Navigation Data expression does not match the format Key1=Value1,Key2?type=Value2.
            </summary>
        </member>
        <member name="P:Navigation.Resources.InvalidRouteData">
            <summary>
              Looks up a localized string similar to Invalid route data, a mandatory route parameter has not been supplied a value.
            </summary>
        </member>
        <member name="P:Navigation.Resources.InvalidTransitionToKey">
            <summary>
              Looks up a localized string similar to {0} State&apos;s Transition to key of {1} does not match a sibling State key.
            </summary>
        </member>
        <member name="P:Navigation.Resources.InvalidTypeAttribute">
            <summary>
              Looks up a localized string similar to Navigation Data type {0} is not valid.
            </summary>
        </member>
        <member name="P:Navigation.Resources.InvalidUrl">
            <summary>
              Looks up a localized string similar to The Url is invalid.
            </summary>
        </member>
        <member name="P:Navigation.Resources.NavigationDataKeyMissing">
            <summary>
              Looks up a localized string similar to The Navigation Data key is mandatory.
            </summary>
        </member>
        <member name="P:Navigation.Resources.NavigationLinkActionMissing">
            <summary>
              Looks up a localized string similar to The Navigation Link must have an action.
            </summary>
        </member>
        <member name="P:Navigation.Resources.NullOrEmpty">
            <summary>
              Looks up a localized string similar to Value cannot be null or empty.
            </summary>
        </member>
        <member name="P:Navigation.Resources.NullStateHandler">
            <summary>
              Looks up a localized string similar to StateHandler cannot be null.
            </summary>
        </member>
        <member name="P:Navigation.Resources.PropertyMissing">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not have a public property named &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Navigation.Resources.PropertyReadOnly">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; property is read-only and cannot be set.
            </summary>
        </member>
        <member name="P:Navigation.Resources.ScriptManagerMissing">
            <summary>
              Looks up a localized string similar to The ScriptManager must appear on the Page before the HistoryNavigator.
            </summary>
        </member>
        <member name="P:Navigation.Resources.StateAttributeInvalid">
            <summary>
              Looks up a localized string similar to {0} State&apos;s {1} attribute is invalid.
            </summary>
        </member>
        <member name="P:Navigation.Resources.StateAttributeMissing">
            <summary>
              Looks up a localized string similar to {0} is a mandatory attribute for a State.
            </summary>
        </member>
        <member name="P:Navigation.Resources.TransitionAttributeMissing">
            <summary>
              Looks up a localized string similar to {0} is a mandatory attribute for a Transition.
            </summary>
        </member>
        <member name="P:Navigation.Resources.TypeAttributeMissing">
            <summary>
              Looks up a localized string similar to type is a mandatory attribute for Navigation Data.
            </summary>
        </member>
        <member name="T:Navigation.PageStateHandler">
            <summary>
            Implementation of <see cref="T:Navigation.IStateHandler"/> that builds and parses
            navigation links for a Web Forms <see cref="T:Navigation.State"/>
            </summary>
        </member>
        <member name="M:Navigation.PageStateHandler.GetNavigationLink(Navigation.State,System.Collections.Specialized.NameValueCollection,System.Web.HttpContextBase)">
            <summary>
            Gets a link that navigates to the <paramref name="state"/> passing the <paramref name="data"/>.
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> to navigate to</param>
            <param name="data">The data to pass when navigating</param>
            <param name="context">The current context</param>
            <returns>The navigation link</returns>
        </member>
        <member name="M:Navigation.PageStateHandler.GetRouteName(Navigation.State,System.Web.HttpContextBase)">
            <summary>
            Returns the route of the <paramref name="state"/>
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> to navigate to</param>
            <param name="context">The current context</param>
            <returns>The route name</returns>
        </member>
        <member name="M:Navigation.PageStateHandler.GetEndResponse(Navigation.State,System.Web.HttpContextBase)">
            <summary>
            Returns true to terminate the current process when navigating with a 
            <see cref="F:Navigation.NavigationMode.Client"/> mode
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> to navigate to</param>
            <param name="context">The current context</param>
            <returns>True to terminate the current process</returns>
        </member>
        <member name="T:Navigation.SessionCrumbTrailPersister">
            <summary>
            Persists crumb trails, over a specified length, in <see cref="P:System.Web.HttpContext.Session"/> on
            the Web server. Prevents the creation of unmanageably long Urls
            </summary>
        </member>
        <member name="M:Navigation.SessionCrumbTrailPersister.Load(System.String)">
            <summary>
            Uses the <paramref name="crumbTrail"/> parameter to determine whether to retrieve the crumb
            trail from <see cref="P:System.Web.HttpContext.Session"/>. If retrieved from session it will be 
            null if it had been removed as a result of the <see cref="P:Navigation.SessionCrumbTrailPersister.HistorySize"/> being breached or 
            if the session expired since the crumb trail was added
            </summary>
            <param name="crumbTrail">Key generated by the <see cref="M:Navigation.SessionCrumbTrailPersister.Save(System.String)"/> method</param>
            <returns>Either the <paramref name="crumbTrail"/> or the retrieved value from server side session; can
            be null if retrieved from session
            </returns>
        </member>
        <member name="M:Navigation.SessionCrumbTrailPersister.Save(System.String)">
            <summary>
            If the <paramref name="crumbTrail"/> is not over the <see cref="P:Navigation.SessionCrumbTrailPersister.MaxLength"/> it is returned.
            Otherwise the <paramref name="crumbTrail"/> is stored in session using a short key, unique
            within a given session. Also expunges old items from session, if the <see cref="P:Navigation.SessionCrumbTrailPersister.HistorySize"/>
            is breached when a new item is added
            </summary>
            <param name="crumbTrail">The crumb trail to persist</param>
            <returns><paramref name="crumbTrail"/> or short, generated key pointing at <paramref name="crumbTrail"/>
            in session</returns>
        </member>
        <member name="P:Navigation.SessionCrumbTrailPersister.MaxLength">
            <summary>
            Gets of sets the length above which any crumb will be stored on the Web server, the default 
            value is 500
            </summary>
        </member>
        <member name="P:Navigation.SessionCrumbTrailPersister.HistorySize">
            <summary>
            Gets of sets the maximum number of crumb trails that will be held at any one time on the 
            Web server, the default value is 50
            </summary>
        </member>
        <member name="T:Navigation.Sorter">
            <summary>
            Provides sorting functionality for any data-bound controls, typically used in conjunction with the
            <see cref="T:System.Web.UI.WebControls.ObjectDataSource"/> control.
            </summary>
        </member>
        <member name="M:Navigation.Sorter.CreateChildControls">
            <summary>
            Creates the child controls that make up the <see cref="T:Navigation.Sorter"/> control
            </summary>
        </member>
        <member name="M:Navigation.Sorter.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the <see cref="T:Navigation.Sorter"/> control to the specified <paramref name="writer"/>
            </summary>
            <param name="writer">The output stream to render on the client</param>
        </member>
        <member name="M:Navigation.Sorter.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the contents of the <see cref="T:Navigation.Sorter"/> control to the specified <paramref name="writer"/>
            </summary>
            <param name="writer">The output stream to render on the client</param>
        </member>
        <member name="P:Navigation.Sorter.SortExpressionKey">
            <summary>
            Gets or sets the SortExpression <see cref="T:Navigation.NavigationData"/> key
            </summary>
        </member>
        <member name="P:Navigation.Sorter.SortExpression">
            <summary>
            Gets or sets the sort expression to <see cref="P:Navigation.StateContext.Data">Context Data</see>
            </summary>
        </member>
        <member name="P:Navigation.Sorter.SortBy">
            <summary>
            Gets or sets the column name to sort by
            </summary>
        </member>
        <member name="P:Navigation.Sorter.DefaultDescending">
            <summary>
            Gets or sets whether the first time the sort is clicked the sort order is descending
            </summary>
        </member>
        <member name="P:Navigation.Sorter.Navigate">
            <summary>
            Gets or sets whether sorting should cause a navigation
            </summary>
        </member>
        <member name="P:Navigation.Sorter.PostBackHyperLink">
            <summary>
            Gets or sets whether clicking the hyperlink will cause a PostBack if javascript is on. Can be used in conjunction
            with ASP.NET Ajax to implement the Single-Page Interface pattern that works with javascript off. 
            This is only relevant if <see cref="P:Navigation.Sorter.Navigate"/> is true
            </summary>
        </member>
        <member name="P:Navigation.Sorter.ButtonType">
            <summary>
            Gets or sets the button type.
            This is only relevant if <see cref="P:Navigation.Sorter.Navigate"/> is false
            </summary>
        </member>
        <member name="P:Navigation.Sorter.Text">
            <summary>
            Gets or sets the text
            </summary>
        </member>
        <member name="P:Navigation.Sorter.ImageUrl">
            <summary>
            Gets or sets Url of the image.
            This is only relevant if <see cref="P:Navigation.Sorter.ButtonType"/> is <see cref="F:System.Web.UI.WebControls.ButtonType.Image"/>
            </summary>
        </member>
        <member name="P:Navigation.Sorter.Direction">
            <summary>
            Gets the <see cref="T:System.Web.UI.WebControls.SortDirection"/> from the <see cref="P:Navigation.Sorter.SortExpression"/>
            </summary>
        </member>
        <member name="T:Navigation.State">
            <summary>
            Configures state information. A child of a <see cref="T:Navigation.Dialog"/> element, it represents
            the endpoint of a navigation
            </summary>
        </member>
        <member name="M:Navigation.State.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.State"/> class
            </summary>
        </member>
        <member name="P:Navigation.State.Transitions">
            <summary>
            Gets the <see cref="T:Navigation.Transition"/> children
            </summary>
        </member>
        <member name="P:Navigation.State.Parent">
            <summary>
            Gets the parent <see cref="T:Navigation.Dialog"/> configuration item
            </summary>
        </member>
        <member name="P:Navigation.State.Index">
            <summary>
            Gets the number of the state within its <see cref="P:Navigation.State.Parent"/>
            </summary>
        </member>
        <member name="P:Navigation.State.Key">
            <summary>
            Gets the key, unique within a <see cref="P:Navigation.State.Parent"/>, used by <see cref="T:Navigation.Dialog"/>
            and <see cref="T:Navigation.Transition"/> elements to specify navigation configuration
            </summary>
        </member>
        <member name="P:Navigation.State.DefaultTypes">
            <summary>
            Gets the default <see cref="T:Navigation.NavigationData"/> <see cref="T:System.Type"/>'s for 
            this <see cref="T:Navigation.State"/>
            </summary>
        </member>
        <member name="P:Navigation.State.Defaults">
            <summary>
            Gets the default <see cref="T:Navigation.NavigationData"/> for this <see cref="T:Navigation.State"/>
            </summary>
        </member>
        <member name="P:Navigation.State.Derived">
            <summary>
            Gets the derived <see cref="T:Navigation.NavigationData"/> for this <see cref="T:Navigation.State"/>
            </summary>
        </member>
        <member name="P:Navigation.State.Title">
            <summary>
            Gets the textual description of the state. The resourceType and resourceKey attributes can be 
            used for localization
            </summary>
        </member>
        <member name="P:Navigation.State.Route">
            <summary>
            Gets the route Url pattern
            </summary>
        </member>
        <member name="P:Navigation.State.TrackCrumbTrail">
            <summary>
            Gets a value that indicates whether to maintain crumb trail information 
            e.g <see cref="P:Navigation.StateContext.PreviousState"/>. This can be used together 
            with <see cref="P:Navigation.State.Route"/> to produce user friendly Urls
            </summary>
        </member>
        <member name="P:Navigation.State.Attributes">
            <summary>
            Gets the list of attributes
            </summary>
        </member>
        <member name="P:Navigation.State.StateHandler">
            <summary>
            Gets or sets the <see cref="T:Navigation.IStateHandler"/> responsible for building and parsing
            navigation links to this <see cref="T:Navigation.State"/>
            </summary>
        </member>
        <member name="P:Navigation.State.Id">
            <summary>
            Gets the unique identifier for this <see cref="T:Navigation.State"/>
            </summary>
        </member>
        <member name="P:Navigation.State.Page">
            <summary>
            Gets the aspx page to display when navigating to this <see cref="T:Navigation.State"/>
            </summary>
        </member>
        <member name="P:Navigation.State.MobilePage">
            <summary>
            Gets the aspx page to display for a mobile device navigating to this <see cref="T:Navigation.State"/>
            </summary>
        </member>
        <member name="P:Navigation.State.MobileRoute">
            <summary>
            Gets the mobile device route Url pattern
            </summary>
        </member>
        <member name="P:Navigation.State.CheckPhysicalUrlAccess">
            <summary>
            Gets a value that indicates whether ASP.NET should validate that the user has authority to access the 
            physical <see cref="P:Navigation.State.Page"/>. This is only relevant if <see cref="P:Navigation.State.Route"/> or <see cref="P:Navigation.State.MobileRoute"/>
            is set
            </summary>
        </member>
        <member name="P:Navigation.State.Theme">
            <summary>
            Gets the theme to assign to the <see cref="P:Navigation.State.Page"/> when displayed
            </summary>
        </member>
        <member name="P:Navigation.State.MobileTheme">
            <summary>
            Gets the theme to assign to the <see cref="P:Navigation.State.Page"/> when displayed for a mobile device
            </summary>
        </member>
        <member name="P:Navigation.State.Masters">
            <summary>
            Gets the master pages to assign to the <see cref="P:Navigation.State.Page"/> when displayed
            </summary>
        </member>
        <member name="P:Navigation.State.MobileMasters">
            <summary>
            Gets the master pages to assign to the <see cref="P:Navigation.State.Page"/> when displayed for a mobile device
            </summary>
        </member>
        <member name="T:Navigation.StateAdapter">
            <summary>
            Plugs the navigation framework into the ASP.NET <see cref="T:System.Web.UI.Page"/> processing
            and must be configured as the <see cref="T:System.Web.UI.Adapters.PageAdapter"/> in the
            Browser.config file. This class is not used in a Unit Test environment
            </summary>
        </member>
        <member name="M:Navigation.StateAdapter.DeterminePostBackMode">
            <summary>
            Validates the incoming Url and if no <see cref="P:Navigation.NavigationSettings.StateIdKey"/> 
            found will navigate to the <see cref="T:Navigation.Dialog"/> whose path property matches the Url
            </summary>
            <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection"/> of the 
            postback variables, if any; otherwise null</returns>
            <exception cref="T:Navigation.UrlException">The <see cref="P:Navigation.NavigationSettings.StateIdKey"/>
            is not found and the Url does not match the path of any <see cref="T:Navigation.Dialog"/>; the page of 
            the <see cref="T:Navigation.State"/> does not match the Url path</exception>
        </member>
        <member name="M:Navigation.StateAdapter.LoadAdapterControlState(System.Object)">
            <summary>
            Loads <see cref="P:Navigation.StateContext.Data">Context Data</see>
            saved by <see cref="M:Navigation.StateAdapter.SaveAdapterControlState"/> during a previous request
            </summary>
            <param name="state">The <see cref="T:Navigation.StateContext"/> data</param>
        </member>
        <member name="M:Navigation.StateAdapter.SaveAdapterControlState">
            <summary>
            Saves <see cref="P:Navigation.StateContext.Data">Context Data</see>
            so is available across post backs
            </summary>
            <returns>The <see cref="T:Navigation.StateContext"/> data</returns>
        </member>
        <member name="T:Navigation.StateContext">
            <summary>
            Provides static properties for accessing context sensitive navigation information.
            Holds the current <see cref="T:Navigation.State"/> and <see cref="T:Navigation.NavigationData"/>.
            Also holds the previous <see cref="T:Navigation.State"/> (this is not the same as the
            previous <see cref="T:Navigation.Crumb"/>)
            </summary>
        </member>
        <member name="P:Navigation.StateContext.PreviousState">
            <summary>
            Gets the <see cref="T:Navigation.State"/> navigated away from to reach the 
            current <see cref="T:Navigation.State"/>
            </summary>
        </member>
        <member name="P:Navigation.StateContext.PreviousDialog">
            <summary>
            Gets the parent of the <see cref="P:Navigation.StateContext.PreviousState"/> property
            </summary>
        </member>
        <member name="P:Navigation.StateContext.State">
            <summary>
            Gets the current <see cref="T:Navigation.State"/>
            </summary>
        </member>
        <member name="P:Navigation.StateContext.Dialog">
            <summary>
            Gets the parent of the <see cref="P:Navigation.StateContext.State"/> property
            </summary>
        </member>
        <member name="P:Navigation.StateContext.Data">
            <summary>
            Gets the <see cref="T:Navigation.NavigationData"/> for the current <see cref="P:Navigation.StateContext.State"/>.
            It can be accessed directly or take part in data binding. Will become the data stored in 
            a <see cref="T:Navigation.Crumb"/> when part of a crumb trail
            </summary>
        </member>
        <member name="P:Navigation.StateContext.Bag">
            <summary>
            Gets the dynamic <see cref="P:Navigation.NavigationData.Bag"/> for the <see cref="P:Navigation.StateContext.Data"/>
            </summary>
        </member>
        <member name="P:Navigation.StateContext.StateId">
            <summary>
            Gets the identifier of the current <see cref="P:Navigation.StateContext.State"/>
            </summary>
        </member>
        <member name="T:Navigation.StateController">
            <summary>
            Manages all navigation. These can be forward using an action parameter; backward via
            a <see cref="T:Navigation.Crumb"/>; refreshing the current <see cref="T:Navigation.State"/>;
            or adding/restoring a history point
            </summary>
        </member>
        <member name="M:Navigation.StateController.SetStateContext(System.String,System.Web.HttpContextBase)">
            <summary>
            Sets the <see cref="P:Navigation.StateContext.Data">Context Data</see> with the data returned
            from the current <see cref="T:Navigation.State"/>'s <see cref="T:Navigation.IStateHandler"/>
            </summary>
            <param name="stateId">The current state id</param>
            <param name="context">The current context</param>
        </member>
        <member name="M:Navigation.StateController.Navigate(System.String)">
            <summary>
            Navigates to a <see cref="T:Navigation.State"/>. Depending on the <paramref name="action"/>
            will either navigate to the 'to' <see cref="T:Navigation.State"/> of a <see cref="T:Navigation.Transition"/>
            or the 'initial' <see cref="T:Navigation.State"/> of a <see cref="T:Navigation.Dialog"/>. It passes
            no <see cref="T:Navigation.NavigationData"/> and a <see cref="T:Navigation.NavigationMode"/> of Client
            </summary>
            <param name="action">The key of a child <see cref="T:Navigation.Transition"/> or the key of 
            a <see cref="T:Navigation.Dialog"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="action"/> does not match the key of 
            a child <see cref="T:Navigation.Transition"/> or the key of a <see cref="T:Navigation.Dialog"/>; or
            there is <see cref="T:Navigation.NavigationData"/> that cannot be converted to a <see cref="T:System.String"/></exception>
            <exception cref="T:System.InvalidOperationException">A mandatory route parameter has not been supplied a value</exception>
        </member>
        <member name="M:Navigation.StateController.Navigate(System.String,Navigation.NavigationMode)">
            <summary>
            Navigates to a <see cref="T:Navigation.State"/>. Depending on the <paramref name="action"/>
            will either navigate to the 'to' <see cref="T:Navigation.State"/> of a <see cref="T:Navigation.Transition"/>
            or the 'initial' <see cref="T:Navigation.State"/> of a <see cref="T:Navigation.Dialog"/>. It passes
            no <see cref="T:Navigation.NavigationData"/>
            </summary>
            <param name="action">The key of a child <see cref="T:Navigation.Transition"/> or the key of 
            a <see cref="T:Navigation.Dialog"/></param>
            <param name="mode">Redirect, Transfer or Mock</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="action"/> does not match the key of 
            a child <see cref="T:Navigation.Transition"/> or the key of a <see cref="T:Navigation.Dialog"/>; or
            there is <see cref="T:Navigation.NavigationData"/> that cannot be converted to a <see cref="T:System.String"/></exception>
            <exception cref="T:System.InvalidOperationException">A mandatory route parameter has not been supplied a value</exception>
        </member>
        <member name="M:Navigation.StateController.Navigate(System.String,Navigation.NavigationData)">
            <summary>
            Navigates to a <see cref="T:Navigation.State"/>. Depending on the <paramref name="action"/>
            will either navigate to the 'to' <see cref="T:Navigation.State"/> of a <see cref="T:Navigation.Transition"/>
            or the 'initial' <see cref="T:Navigation.State"/> of a <see cref="T:Navigation.Dialog"/>. It passes
            a <see cref="T:Navigation.NavigationMode"/> of Client
            </summary>
            <param name="action">The key of a child <see cref="T:Navigation.Transition"/> or the key of 
            a <see cref="T:Navigation.Dialog"/></param>
            <param name="toData">The <see cref="T:Navigation.NavigationData"/> to be passed to the 
            next <see cref="T:Navigation.State"/> and stored in the <see cref="T:Navigation.StateContext"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="action"/> does not match the key of 
            a child <see cref="T:Navigation.Transition"/> or the key of a <see cref="T:Navigation.Dialog"/>; or
            there is <see cref="T:Navigation.NavigationData"/> that cannot be converted to a <see cref="T:System.String"/></exception>
            <exception cref="T:System.InvalidOperationException">A mandatory route parameter has not been supplied a value</exception>
        </member>
        <member name="M:Navigation.StateController.Navigate(System.String,Navigation.NavigationData,Navigation.NavigationMode)">
            <summary>
            Navigates to a <see cref="T:Navigation.State"/>. Depending on the <paramref name="action"/>
            will either navigate to the 'to' <see cref="T:Navigation.State"/> of a <see cref="T:Navigation.Transition"/>
            or the 'initial' <see cref="T:Navigation.State"/> of a <see cref="T:Navigation.Dialog"/>
            </summary>
            <param name="action">The key of a child <see cref="T:Navigation.Transition"/> or the key of 
            a <see cref="T:Navigation.Dialog"/></param>
            <param name="toData">The <see cref="T:Navigation.NavigationData"/> to be passed to the 
            next <see cref="T:Navigation.State"/> and stored in the <see cref="T:Navigation.StateContext"/></param>
            <param name="mode">Redirect, Transfer or Mock</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="action"/> does not match the key of 
            a child <see cref="T:Navigation.Transition"/> or the key of a <see cref="T:Navigation.Dialog"/>; or
            there is <see cref="T:Navigation.NavigationData"/> that cannot be converted to a <see cref="T:System.String"/></exception>
            <exception cref="T:System.InvalidOperationException">A mandatory route parameter has not been supplied a value</exception>
        </member>
        <member name="M:Navigation.StateController.GetNavigationLink(System.String)">
            <summary>
            Gets a Url to navigate to a <see cref="T:Navigation.State"/>. Depending on the <paramref name="action"/>
            will either navigate to the 'to' <see cref="T:Navigation.State"/> of a <see cref="T:Navigation.Transition"/>
            or the 'initial' <see cref="T:Navigation.State"/> of a <see cref="T:Navigation.Dialog"/>. It passes
            no <see cref="T:Navigation.NavigationData"/>
            </summary>
            <param name="action">The key of a child <see cref="T:Navigation.Transition"/> or the key of 
            a <see cref="T:Navigation.Dialog"/></param>
            <returns>Url that will navigate to <see cref="T:Navigation.State"/> specified in the <paramref name="action"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="action"/> does not match the key of 
            a child <see cref="T:Navigation.Transition"/> or the key of a <see cref="T:Navigation.Dialog"/>; or
            there is <see cref="T:Navigation.NavigationData"/> that cannot be converted to a <see cref="T:System.String"/></exception>
        </member>
        <member name="M:Navigation.StateController.GetNavigationLink(System.String,Navigation.NavigationData)">
            <summary>
            Gets a Url to navigate to a <see cref="T:Navigation.State"/>. Depending on the <paramref name="action"/>
            will either navigate to the 'to' <see cref="T:Navigation.State"/> of a <see cref="T:Navigation.Transition"/>
            or the 'initial' <see cref="T:Navigation.State"/> of a <see cref="T:Navigation.Dialog"/>
            </summary>
            <param name="action">The key of a child <see cref="T:Navigation.Transition"/> or the key of 
            a <see cref="T:Navigation.Dialog"/></param>
            <param name="toData">The <see cref="T:Navigation.NavigationData"/> to be passed to the 
            next <see cref="T:Navigation.State"/> and stored in the <see cref="T:Navigation.StateContext"/></param>
            <returns>Url that will navigate to <see cref="T:Navigation.State"/> specified in the <paramref name="action"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="action"/> does not match the key of 
            a child <see cref="T:Navigation.Transition"/> or the key of a <see cref="T:Navigation.Dialog"/>; or
            there is <see cref="T:Navigation.NavigationData"/> that cannot be converted to a <see cref="T:System.String"/></exception>
        </member>
        <member name="M:Navigation.StateController.CanNavigateBack(System.Int32)">
            <summary>
            Determines if the <paramref name="distance"/> specified is within the bounds of the crumb
            trail represented by the <see cref="P:Navigation.StateController.Crumbs"/> collection
            </summary>
            <param name="distance">Starting at 1, the number of <see cref="T:Navigation.Crumb"/> steps to go back</param>
            <returns>False if less than 1 or greater than the size of the <see cref="P:Navigation.StateController.Crumbs"/> collection;
            true otherwise</returns>
        </member>
        <member name="M:Navigation.StateController.NavigateBack(System.Int32)">
            <summary>
            Navigates back to the <see cref="T:Navigation.Crumb"/> contained in the crumb trail, represented by
            the <see cref="P:Navigation.StateController.Crumbs"/> collection, as specified by the <paramref name="distance"/>.
            In the crumb trail no two crumbs can have the same <see cref="T:Navigation.State"/> but all must
            have the same <see cref="T:Navigation.Dialog"/>. It passes a <see cref="T:Navigation.NavigationMode"/> of Client
            </summary>
            <param name="distance">Starting at 1, the number of <see cref="T:Navigation.Crumb"/> steps to go back</param>
            <exception cref="T:System.ArgumentException"><see cref="M:Navigation.StateController.CanNavigateBack(System.Int32)"/> returns false for
            this <paramref name="distance"/></exception>
            <exception cref="T:System.InvalidOperationException">A mandatory route parameter has not been supplied a value</exception>
        </member>
        <member name="M:Navigation.StateController.NavigateBack(System.Int32,Navigation.NavigationMode)">
            <summary>
            Navigates back to the <see cref="T:Navigation.Crumb"/> contained in the crumb trail, represented by
            the <see cref="P:Navigation.StateController.Crumbs"/> collection, as specified by the <paramref name="distance"/>.
            In the crumb trail no two crumbs can have the same <see cref="T:Navigation.State"/> but all must
            have the same <see cref="T:Navigation.Dialog"/>
            </summary>
            <param name="distance">Starting at 1, the number of <see cref="T:Navigation.Crumb"/> steps to go back</param>
            <param name="mode">Redirect, Transfer or Mock</param>
            <exception cref="T:System.ArgumentException"><see cref="M:Navigation.StateController.CanNavigateBack(System.Int32)"/> returns false for
            this <paramref name="distance"/></exception>
            <exception cref="T:System.InvalidOperationException">A mandatory route parameter has not been supplied a value</exception>
        </member>
        <member name="M:Navigation.StateController.GetNavigationBackLink(System.Int32)">
            <summary>
            Gets a Url to navigate to a <see cref="T:Navigation.Crumb"/> contained in the crumb trail, 
            represented by the <see cref="P:Navigation.StateController.Crumbs"/> collection, as specified by the <paramref name="distance"/>.
            In the crumb trail no two crumbs can have the same <see cref="T:Navigation.State"/> but all must
            have the same <see cref="T:Navigation.Dialog"/>
            </summary>
            <param name="distance">Starting at 1, the number of <see cref="T:Navigation.Crumb"/> steps to go back</param>
            <returns>Url that will navigate to <see cref="T:Navigation.Crumb"/> specified by the <paramref name="distance"/></returns>
            <exception cref="T:System.ArgumentException"><see cref="M:Navigation.StateController.CanNavigateBack(System.Int32)"/> returns false for
            this <paramref name="distance"/></exception>
        </member>
        <member name="M:Navigation.StateController.Refresh">
            <summary>
            Navigates to the current <see cref="T:Navigation.State"/> passing no <see cref="T:Navigation.NavigationData"/>
            data and a <see cref="T:Navigation.NavigationMode"/> of Client
            </summary>
            <exception cref="T:System.InvalidOperationException">A mandatory route parameter has not been supplied a value</exception>
        </member>
        <member name="M:Navigation.StateController.Refresh(Navigation.NavigationData)">
            <summary>
            Navigates to the current <see cref="T:Navigation.State"/> passing a <see cref="T:Navigation.NavigationMode"/> of Client
            </summary>
            <param name="toData">The <see cref="T:Navigation.NavigationData"/> to be passed to the 
            current <see cref="T:Navigation.State"/> and stored in the <see cref="T:Navigation.StateContext"/></param>
            <exception cref="T:System.ArgumentException">There is <see cref="T:Navigation.NavigationData"/> that cannot be converted to a <see cref="T:System.String"/></exception>
            <exception cref="T:System.InvalidOperationException">A mandatory route parameter has not been supplied a value</exception>
        </member>
        <member name="M:Navigation.StateController.Refresh(Navigation.NavigationMode)">
            <summary>
            Navigates to the current <see cref="T:Navigation.State"/> passing no <see cref="T:Navigation.NavigationData"/>
            data
            </summary>
            <param name="mode">Redirect, Transfer or Mock</param>
            <exception cref="T:System.InvalidOperationException">A mandatory route parameter has not been supplied a value</exception>
        </member>
        <member name="M:Navigation.StateController.Refresh(Navigation.NavigationData,Navigation.NavigationMode)">
            <summary>
            Navigates to the current <see cref="T:Navigation.State"/>
            </summary>
            <param name="toData">The <see cref="T:Navigation.NavigationData"/> to be passed to the 
            current <see cref="T:Navigation.State"/> and stored in the <see cref="T:Navigation.StateContext"/></param>
            <param name="mode">Redirect, Transfer or Mock</param>
            <exception cref="T:System.ArgumentException">There is <see cref="T:Navigation.NavigationData"/> that cannot be converted to a <see cref="T:System.String"/></exception>
            <exception cref="T:System.InvalidOperationException">A mandatory route parameter has not been supplied a value</exception>
        </member>
        <member name="M:Navigation.StateController.GetRefreshLink(Navigation.NavigationData)">
            <summary>
            Gets a Url to navigate to the current <see cref="T:Navigation.State"/>
            </summary>
            <param name="toData">The <see cref="T:Navigation.NavigationData"/> to be passed to the 
            current <see cref="T:Navigation.State"/> and stored in the <see cref="T:Navigation.StateContext"/></param>
            <returns>Url that will navigate to the current <see cref="T:Navigation.State"/></returns>
            <exception cref="T:System.ArgumentException">There is <see cref="T:Navigation.NavigationData"/> that cannot be converted to a <see cref="T:System.String"/></exception>
        </member>
        <member name="M:Navigation.StateController.NavigateLink(Navigation.State,System.String)">
            <summary>
            Redirects or Transfers to the <paramref name="url"/>
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> to navigate to</param>
            <param name="url">The target location</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="state"/> is null</exception>
        </member>
        <member name="M:Navigation.StateController.NavigateLink(Navigation.State,System.String,Navigation.NavigationMode)">
            <summary>
            Redirects or Transfers to the <paramref name="url"/> depending on the 
            <paramref name="mode"/> specified
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> to navigate to</param>
            <param name="url">The target location</param>
            <param name="mode">Indicates whether to Redirect or Transfer</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="state"/> is null</exception>
        </member>
        <member name="M:Navigation.StateController.GetNextState(System.String)">
            <summary>
            Gets the next <see cref="T:Navigation.State"/>. Depending on the <paramref name="action"/>
            will either return the 'to' <see cref="T:Navigation.State"/> of a <see cref="T:Navigation.Transition"/>
            or the 'initial' <see cref="T:Navigation.State"/> of a <see cref="T:Navigation.Dialog"/>
            </summary>
            <param name="action">The key of a child <see cref="T:Navigation.Transition"/> or the key of 
            a <see cref="T:Navigation.Dialog"/></param>
            <returns>The next <see cref="T:Navigation.State"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="action"/> does not match the key of 
            a child <see cref="T:Navigation.Transition"/> or the key of a <see cref="T:Navigation.Dialog"/></exception>
        </member>
        <member name="M:Navigation.StateController.GetCrumb(System.Int32)">
            <summary>
            Gets the <see cref="T:Navigation.Crumb"/> contained in the crumb trail, represented by the <see cref="P:Navigation.StateController.Crumbs"/>
            collection, as specified by the <paramref name="distance"/>. In the crumb trail no two crumbs can have the same
            <see cref="T:Navigation.State"/> but all must have the same <see cref="T:Navigation.Dialog"/>
            </summary>
            <param name="distance">Starting at 1, the number of <see cref="T:Navigation.Crumb"/> steps to go back</param>
            <returns>The <see cref="T:Navigation.Crumb"/></returns>
            <exception cref="T:System.ArgumentException"><see cref="M:Navigation.StateController.CanNavigateBack(System.Int32)"/> returns false for
            this <paramref name="distance"/></exception>
        </member>
        <member name="M:Navigation.StateController.AddHistoryPoint(System.Web.UI.Page,System.String)">
            <summary>
            Wraps the ASP.NET <see cref="T:System.Web.UI.ScriptManager"/> history point functionality.
            Adds a history point passing no <see cref="T:Navigation.NavigationData"/>
            </summary>
            <param name="page">Current <see cref="T:System.Web.UI.Page"/></param>
            <param name="title">Title for history point</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="page"/> is null</exception>
            <exception cref="T:System.ArgumentException">There is <see cref="T:Navigation.NavigationData"/> that cannot be converted to a <see cref="T:System.String"/></exception>
        </member>
        <member name="M:Navigation.StateController.AddHistoryPoint(System.Web.UI.Page,Navigation.NavigationData,System.String)">
            <summary>
            Wraps the ASP.NET <see cref="T:System.Web.UI.ScriptManager"/> history point functionality.
            </summary>
            <param name="page">Current <see cref="T:System.Web.UI.Page"/></param>
            <param name="toData">The <see cref="T:Navigation.NavigationData"/> used to create the history point</param>
            <param name="title">Title for history point</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="page"/> is null</exception>
            <exception cref="T:System.ArgumentException">There is <see cref="T:Navigation.NavigationData"/> that cannot be converted to a <see cref="T:System.String"/></exception>
        </member>
        <member name="M:Navigation.StateController.NavigateHistory(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Responds to a <see cref="T:System.Web.UI.ScriptManager"/> history navigation handler and restores the
            <paramref name="data"/> saved by <see cref="M:Navigation.StateController.AddHistoryPoint(System.Web.UI.Page,Navigation.NavigationData,System.String)"/> 
            method to the <see cref="T:Navigation.StateContext"/>
            </summary>
            <param name="data">Saved <see cref="T:Navigation.StateContext"/> to restore</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null</exception>
            <exception cref="T:Navigation.UrlException">There is data that cannot be converted from a <see cref="T:System.String"/>;
            or the <see cref="T:Navigation.NavigationShield"/> detects tampering</exception>
        </member>
        <member name="P:Navigation.StateController.Crumbs">
            <summary>
            Gets a <see cref="T:Navigation.Crumb"/> collection representing the crumb trail, ordered
            oldest <see cref="T:Navigation.Crumb"/> first
            </summary>
        </member>
        <member name="P:Navigation.StateController.RefreshLink">
            <summary>
            Gets a Url to navigate to the current <see cref="T:Navigation.State"/> passing 
            no <see cref="T:Navigation.NavigationData"/> data
            </summary>
        </member>
        <member name="T:Navigation.StateInfoCollection`1">
            <summary>
            Represents a strongly typed collection of the items configurable via the Navigation/StateInfo
            section. The <see cref="T:Navigation.StateInfoConfig"/> class holds all these in 
            its <see cref="P:Navigation.StateInfoConfig.Dialogs"/> property
            </summary>
            <typeparam name="T">Can be <see cref="T:Navigation.Dialog"/>, <see cref="T:Navigation.State"/> 
            or <see cref="T:Navigation.Transition"/> type</typeparam>
        </member>
        <member name="M:Navigation.StateInfoCollection`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.StateInfoCollection`1"/> class with 
            serialized data
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="M:Navigation.StateInfoCollection`1.Get(System.String)">
            <summary>
            Gets the unique state information configuration item with the specified <paramref name="key"/>,
            see <see cref="P:Navigation.Dialog.Key">Dialog Key</see>, <see cref="P:Navigation.State.Key">State Key</see>
            and <see cref="P:Navigation.Transition.Key">Transition Key</see> properties
            </summary>
            <param name="key">Must match the key attribute of an item configurable via 
            the Navigation/StateInfo</param>
            <returns>Matching state information configuration item, if found; otherwise, null</returns>
        </member>
        <member name="M:Navigation.StateInfoCollection`1.Get(System.Int32)">
            <summary>
            Gets the unique state information configuration item with the specified <paramref name="index"/>,
            see <see cref="P:Navigation.Dialog.Index">Dialog Index</see>, <see cref="P:Navigation.State.Index">State Index</see>
            and <see cref="P:Navigation.Transition.Index">Transition Index</see> properties
            </summary>
            <param name="index">Must match the number of the configurable item from the Navigation/StateInfo 
            as read sequentially within its parent node</param>
            <returns>Matching state information configuration item, if found; otherwise, null</returns>
        </member>
        <member name="M:Navigation.StateInfoCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:Navigation.StateInfoCollection`1"/> entries to a one-dimensional Array 
            instance at the specified index
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of 
            the state information configuration objects copied from <see cref="T:Navigation.StateInfoCollection`1"/>.
            The <see cref="T:System.Array"/> must have zero-based indexing</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional; or <paramref name="index"/>
            is equal to or greater than the length of <paramref name="array"/>; or the number of elements in the source
            <see cref="T:Navigation.StateInfoCollection`1"/> is greater than the available space from <paramref name="index"/>
            to the end of the destination array</exception>
        </member>
        <member name="M:Navigation.StateInfoCollection`1.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that iterates through
            the <see cref="T:Navigation.StateInfoCollection`1"/> elements
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for
            the <see cref="T:Navigation.StateInfoCollection`1"/></returns>
        </member>
        <member name="P:Navigation.StateInfoCollection`1.Item(System.String)">
            <summary>
            Gets the unique state information configuration item with the specified <paramref name="key"/>,
            see <see cref="P:Navigation.Dialog.Key">Dialog Key</see>, <see cref="P:Navigation.State.Key">State Key</see>
            and <see cref="P:Navigation.Transition.Key">Transition Key</see> properties
            </summary>
            <param name="key">Must match the key attribute of an item configurable via 
            the Navigation/StateInfo</param>
            <returns>Matching state information configuration item, if found; otherwise, null</returns>
        </member>
        <member name="P:Navigation.StateInfoCollection`1.Item(System.Int32)">
            <summary>
            Gets the unique state information configuration item with the specified <paramref name="index"/>,
            see <see cref="P:Navigation.Dialog.Index">Dialog Index</see>, <see cref="P:Navigation.State.Index">State Index</see>
            and <see cref="P:Navigation.Transition.Index">Transition Index</see> properties
            </summary>
            <param name="index">Must match the number of the configurable item from the Navigation/StateInfo 
            as read sequentially within its parent node</param>
            <returns>Matching state information configuration item, if found; otherwise, null</returns>
        </member>
        <member name="T:Navigation.StateInfoConfig">
            <summary>
            Provides static access to the <see cref="T:Navigation.Dialog"/>, <see cref="T:Navigation.State"/>
            and <see cref="T:Navigation.Transition"/> configuration
            </summary>
        </member>
        <member name="M:Navigation.StateInfoConfig.ParseNavigationDataExpression(System.String,Navigation.State,System.Boolean)">
            <summary>
            Creates <see cref="T:Navigation.NavigationData"/> that corresponds to the key/value pairs
            specified by the <paramref name="expression"/></summary>
            <param name="expression">The key/value pairs with types optional. Values are optional if
            <paramref name="useCurrentData"/> is true</param>
            <param name="state">Holds the <see cref="P:Navigation.State.DefaultTypes"/> of the keys</param>
            <param name="useCurrentData">Indicates whether values can be retrieved from the current
            <see cref="P:Navigation.StateContext.Data"/></param>
            <returns>The <see cref="T:Navigation.NavigationData"/> that corresponds to the specified
            key/value pairs</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="expression"/> is null</exception>
            <exception cref="T:System.FormatException">Either the <paramref name="expression"/> was not
            in a recognised format or it contained an unrecognised type or a value was not in a format
            recognised by its corresponding type</exception>
            <exception cref="T:System.InvalidCastException">The <paramref name="expression"/> specifies types
            of guid or timespan</exception>
            <exception cref="T:System.OverflowException">A value represents a number that is out of the
            range of its corresponding type</exception>
        </member>
        <member name="M:Navigation.StateInfoConfig.AddStateRoutes">
            <summary>
            Registers all <see cref="P:Navigation.State.Route"/> configuration information.
            This method is called automatically by ASP.NET and should not be called manually
            </summary>
        </member>
        <member name="M:Navigation.StateInfoConfig.GetRouteDefaults(Navigation.State,System.String)">
            <summary>
            Returns <paramref name="state"/> defaults for the specified <paramref name="route"/> parameters
            </summary>
            <param name="state">The <see cref="T:Navigation.State"/> to check for default values</param>
            <param name="route">The route parameters</param>
            <returns><see cref="T:Navigation.State"/> defaults for the supplied route</returns>
        </member>
        <member name="P:Navigation.StateInfoConfig.Dialogs">
            <summary>
            Gets a collection of <see cref="T:Navigation.Dialog"/> information with their child
            <see cref="T:Navigation.State"/> information and grandchild <see cref="T:Navigation.Transition"/>
            information
            </summary>
        </member>
        <member name="P:Navigation.StateInfoConfig.Fluent">
            <summary>
            Gets a fluent builder of the <see cref="T:Navigation.Dialog"/>, <see cref="T:Navigation.State"/>
            and <see cref="T:Navigation.Transition"/> configuration
            </summary>
        </member>
        <member name="T:Navigation.StateInfoSectionHandler">
            <summary>
            Provides access to the Navigation/StateInfo section and is not intended to be used outside
            of the Navigation framework
            </summary>
        </member>
        <member name="T:Navigation.Transition">
            <summary>
            Configures transition information. A child of a <see cref="T:Navigation.State"/> element it represents
            a possible navigation from its <see cref="P:Navigation.Transition.Parent"/> to a sibling <see cref="T:Navigation.State"/>
            </summary>
        </member>
        <member name="P:Navigation.Transition.To">
            <summary>
            Gets the state to navigate to if the <see cref="P:Navigation.Transition.Key"/> is passed as an action parameter
            to the <see cref="T:Navigation.StateController"/>
            </summary>
        </member>
        <member name="P:Navigation.Transition.Parent">
            <summary>
            Gets the parent <see cref="T:Navigation.State"/> configuration item
            </summary>
        </member>
        <member name="P:Navigation.Transition.Index">
            <summary>
            Gets the number of the transition within its <see cref="P:Navigation.Transition.Parent"/>
            </summary>
        </member>
        <member name="P:Navigation.Transition.Key">
            <summary>
            Gets the key, unique within a <see cref="P:Navigation.Transition.Parent"/>, which is passed as the action
            parameter to the <see cref="T:Navigation.StateController"/> when navigating
            </summary>
        </member>
        <member name="T:Navigation.UrlException">
            <summary>
            The exception thrown when an invalid Url is received. Invalid Urls must be as a result of
            tampering and are typically detected by a custom <see cref="T:Navigation.NavigationShield"/>
            (or <see cref="T:Navigation.ChecksumNavigationShield"/>); also detected when a query string
            parameter cannot be converted using the discovered <see cref="T:System.ComponentModel.TypeConverter"/>
            </summary>
        </member>
        <member name="M:Navigation.UrlException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.UrlException"/> class, setting 
            the message of the new instance to a system-supplied message that takes into account the 
            current system culture
            </summary>
        </member>
        <member name="M:Navigation.UrlException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.UrlException"/> class with the
            specified error message
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error. The content 
            of <paramref name="message"/> is intended to be understood by humans. The caller of this 
            constructor is required to ensure that this string has been localized for the current system 
            culture</param>
        </member>
        <member name="M:Navigation.UrlException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.UrlException"/> class with serialized
            data
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error. The content 
            of <paramref name="message"/> is intended to be understood by humans. The caller of this 
            constructor is required to ensure that this string has been localized for the current system 
            culture</param>
            <param name="innerException">The exception that is the cause of the current exception. If 
            the <paramref name="innerException"/> is not a null reference, the current exception is raised 
            in a catch block that handles the inner exception</param>
        </member>
        <member name="M:Navigation.UrlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Navigation.UrlException"/> class with serialized
            data
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
    </members>
</doc>
